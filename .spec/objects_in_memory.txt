All objects preceeded by a u64 (8 bytes) with its type. This means everything has at least 8 bytes of size. Pointers point _after_ this, which means this info is always "behind" data. IDEA: Make this less somehow? Unlikely to use 2^64 types.

Everything is aligned to min(size, 8).

Numbers: X bytes aligned.
Booleans: 1 byte. Only first bit is used.
Sig: 8 bytes.
Chars: 4 bytes.
Enums: Variable, but known at compile time.

Pointers: 8 bytes.
Unique pointer: 8 bytes.
Shared pointer: 8 bytes. Shared data has a 16 byte header (8 bytes Pointer count + 8 bytes Weak count) followed by the object data.
Weak pointer: 8 bytes. Also points to shared data.
Array<k>[n]: 8 bytes size, 8 bytes pointer to data. Data is n * k bytes of elements.

Strings[n]: 8 bytes size, 8 bytes pointer to data. Data is n * 4 bytes characters. Effectively UTF-32.

Struct: All of its members, in order, aligned as needed. Size variable but known at compile time. 
Union: Size of it's biggest member. Known at compile time.

Closure: 8 bytes premade stack (n), n bytes premade stack, 8 bytes jump address. (For closures this is the function address, for coroutines this is where last left off)
Function ptr: 16 bytes. 8 bytes function address, 8 zero bytes.
Closure ptr: 16 bytes. 8 bytes function address, 8 bytes closure data location.