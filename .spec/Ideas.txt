(Syntax not final)

Undumb imports (Somehow)

Basically C syntax

Less retarded function syntax:
void(int,char**) fn -> Pointer to a void(int, char**) function 

function keyword similar to auto, only for functions

Declare a function anywhere. Anonymous function syntax.

char, short, int, long, float, double, void 

struct, union, enum

Special sig type for function returns

try/catch for sig return values

Proper string construct

Proper boolean construct (And keywords)

Byte datatype, instead of void*

defer, like in Go.

Multiple return values.
int:int(double)

C-like pointers (No -> operator though)

sizeof operator

++, --, +, -, *, **, /, %, #, @, !, &, |, ^, !!, &&, ||, ^^, ., .., ...
(Inc, Dec, Add, Sub, Mul, Pow, Div, Mod, Address of, Dereference, Not, And, Or, Xor, Logic not, Logic and, Logic Or, Logic Xor, Access, Concat, Spread)

?:
(Ternary operator)

Bit set, clear, check and toggle operators.
(@|, @&, @?, @^)

null proper, for pointers

Shared, unique and weak pointers
(#+, #!, #?)

Assigning weak pointer to shared pointer to lock

Variable arguments are not cancerous, just store them in an array or something
(int sum(int... args))

Default arguments and named arguments

Arrays have an easy way of getting their count. Same for strings. (Uses introspection)

Switch cases use FOOKIN BRACKETS
switch a {
    case 1 {
        // Things
    }
}

Cases can have commas

In fact, brackets are mandatory, and so parenthesis are not
if true {
    // Stuff
}

Switch does NOT fallthrough by default (fallthrough with continue)

Switch can also do strings (Becomes if-else)

else is used for the default case

Introspection (But can be removed when compiling)

for-each loop (Actually probably not needed)

if, while, switch, do-while, for

goto (label?) break, continue, leave (For leaving any scope) return

if-initializer, switch-initializer, while-initializer?