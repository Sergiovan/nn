- Prepare for closures properly
- Types should hold pointers to each other. Type size is important
- Types and full types are different.
- new and delete
- Arrays are pointers. There is no array type. Pointers hold array information when available.
- Dot expressions are the same as identifiers
- Some identifiers need to exist, others need to not
- "this" exists
- Overloads exist
- Declarations without definitions exist
- Array brackets are extremely complicated
- Get specific values from function call
- Keep track of closest enclosing function and struct/union/enum
- Default parameters and spread parameters are part of the type (but the user doesn't have to write them out)
- Differentiate between expression statements and assignment statements (If token is not iden, it's an expression. If it is an iden, search until semicolon or open paren, skipping groupings. skipping groupings and find an assignment. If found, it's an assignment. Else it's an expression)
- Union types can only have one default
- Functions and structs in construction have no pure version. It is added after they are complete.

REMEMBER:
- Make lookup starter as part of the state for dot expressions

CLOSURES:
- Function pointers point to structure of format: 8 bytes stack size (in bytes), x bytes of stack, 8 bytes pointer to function location.
 If stack size is 0, simply set up normal function call.
 If not, copy the stack bytes into the next function's stack while setting it up.
 Closure values keep track of which values need to be stored in this stack, and the function self knows their types.