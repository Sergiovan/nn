symbol table:
 name -> symbol
symbol:
 * type: type
 * variable: type + data
 * function: overload[]
 * namespace: symbol table
type: 
 * primitive: some number
 * pointer: pointer type + type
 * struct: name? + sfield[] <-> trie<int>
 * union: name? + field[] <-> trie<int>
 * enum: name? + trie<int>
 * funct: name? + type[] + parameter[]
overload -> type + data
primitive: 
 * void
 * byte
 * short
 * int
 * long
 * float
 * double
 * long double
 * char
 * string
 * bool
 * sig
 * fun
 * let
pointer type:
 * naked
 * unique
 * shared
 * weak
field:
 * type
 * data?
sfield:
 * type
 * data?
 * bitfield?
parameter:
 * type
 * name?
 * data?
 * variable length?
 
Type "mangling":
Type transformed into its type number, separated by spaces
Pointers into *,!,?,+
Pointer varclass into a number too, for the flags
Array dimensions signified with [. No fixed dimensions, just arrayness (Array length included in array)
Function types are always preceded by their modifiers without separation. 0 for no modifiers
Functions separate types with :, also start with :
Function parameters separated with , and also start with , even if there are no parameters
