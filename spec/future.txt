gen, yield keyword: For coroutines

===

def gen generator(-> u64) {
    var i = 0;
    while true {
        yield i++;
    }
}

var nums = generator();
print("{} {} {} {} {}", nums(), nums(), nums(), nums(), nums()); # Or something like that

===
match keyword: For pattern matching

===
var list = '[1, 2, 3, 4, 5];
match list {
    case '[] {
        print("Empty");
    }
    case '[x] {
        print("One element: {}", x);
    }
    case '[x, xs...] {
        print("Many elements: {} and {} more", x, ~xs);
    }
}

===
dynamic keyword: Dynamic dispatch overloading


def fun to_string(var a: dynamic -> str) {
    return "Default";
}

def fun to_string(var a: str -> str) {
    return a;
}

def fun to_string(var a: u64 -> str) {
    return [...];
}

# Compiles to

def fun to_string(var a: any) {
    switch ~a {
        case str {
            return to_str(a as str);
        }
        case u64 {
            return to_str(a as u64);
        }
        else {
            return "Default";
        }
    }
} # Does this make sense? Is this useful?

===
static keyword: 

===

# No use for now, just reserved

===
asm keyword: Embedded assembly

===

asm [TBD] {
    [TBD]
}

=== 

Copy vs Move