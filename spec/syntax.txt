# Hash marks a comment
# "x" is for x, literally
# x* is 0 or more of x
# x+ is 1 or more of x
# x? is 0 or 1 of x
# x, y is x followed by y
# (x) is x
# (x; y) is x separated by y. Trailing allowed
# (x! y) is x separated by y. Trailing not allowed
# (x -> y) x followed by y
# (x | y) is either x or y
# r"x" is anything that matches x as regex
# [[x]] is x as special syntax
# \x is x escaped

# Token start

letter = r"[a-zA-Z]" ; # TODO Extend with unicode letters
digit  = r"[0-9]" ;  # TODO Extend with unicode digits?
bindigit = r"[01]" ; 
octdigit = r"[0-7]" ; 
hexdigit = r"[0-9a-fA-F]" ;
whitespace = r"[ \n\t]" ; # TODO Extend with unicode whitespace
symbol = r"[`~!@#%^&*()-+[]{}\\|<>/?]" ; # Not to be extended

underscore = "_" ;
dollar = "$" ;
apostrophe = "'" ;
quote = "\"" ;
semicolon = ";" ;
dot = "." ;
comma = "," ;
colon = ":" ;
doublecolon = "::" ;
asterisk = "*" ; 

other = [[Anything that's not letter, digit, whitespace, symbols, underscore or dollar]] ;
identifier_start = underscore?, (letter | other) ;
identifier_legal = (underscore | letter | other | digit | apostrophe) ;
any = "\\"?, (letter | digit | whitespace | symbol | underscore | dollar | other) ;

u0 = "u0" ;

u8  = "u8" ;
u16 = "u16" ;
u32 = "u32" ;
u64 = "u64" ;

s8  = "s8" ;
s16 = "s16" ;
s32 = "s32" ;
s64 = "s64" ;

e64 = "e64" ;

f32 = "f32" ;
f64 = "f64" ;

u1  = "u1" ;

c32 = "c32" ;

type = "type" ;
any = "any" ;

fun = "fun" ;
struct = "struct" ;
union = "union" ;
enum = "enum" ;
tuple = "tuple" ;

infer = "infer" ;

var = "var" ;
let = "let" ;
def = "def" ;

const = "const" ;
volat = "volat" ;

pointer = "*" ;
upointer = "!" ;
spointer = "+" ;
wpointer = "?" ;
any_pointer = (pointer | upointer | spointer | wpointer) ;

if = "if" ;
else = "else" ;
for = "for" ;
loop = "loop" ;
while = "while" ;
do = "do" ;
switch = "switch" ;
case = "case" ;
return = "return" ;
raise = "raise" ;
yield = "yield" ;
match = "match" ;

break = "break" ;
continue = "continue" ;
goto = "goto" ;
label = "label" ;
defer = "defer" ;
try = "try" ;
catch = "catch" ;

true = "true" ;
false = "false" ;
null = "null" ;

import = "import" ;
using = "using" ;
namespace = "namespace" ;
as = "as" ;
in = "in" ;
new = "new" ;
delete = "delete" ;
this = "this" ;
placeholder = "_" ;
sizeof = "sizeof" ;
typeof = "typeof" ;
typeinfo = "typeinfo" ;

dynamic = "dynamic" ;
static = "static" ;
and = "and" ;
or = "or" ;

operator = (symbol, symbol?, symbol?, symbol? | sizeof | typeof | const | volat) ;
prefix_operator = [[ Operators that function as pre-unary ]] ;
postfix_operator = [[ Operators that function as post-unary ]] ; # May not have the same elements as infix or post-circumfix
infix_operator = [[ Operators that function as infix ]] ; # May not have the same elements as postfix or post-cicumfix
post_circumfix = [[ Operators that function as post-curcumfix ]] ; # May not have the same elements as postfix or infix

assign = "=" ;
opandassign = operator, assign ;

oparen = "(" ;
cparen = ")" ;
obrace = "{" ;
cbrace = "}" ;
obrack = "[" ;
cbrack = "]" ;
lt     = "<" ;
gt     = ">" ;
rarrow = "->" ;
srarrow = "=>" ;
spread = "..." ;
diamond = "<>" ;
nothing = "---" ;

dseparator = (apostrophe | underscore) ;
simple_number = digit, (dseparator?, digit)* ;
simple_binary = bindigit, (dseparator?, bindigit)* ;
simple_octal = octdigit, (dseparator?, octdigit)* ;
simple_hex = hexdigit, (dseparator?, hexdigit)* ;
simple_any = (digit | letter), (dseparator?, (digit | letter))* ;

decimal_number = simple_number, (dot, simple_number)?, ("e", r"[+-]", digit+)?, r"[fF]"? ;
binary_number = "0", r"[bB]", simple_binary ;
octal_number = "0", r"[oO]", simple_octal ;
hexadecimal_number = "0", r"[xX]", simple_hex ;
any_number = simple_number, r"[lL]", simple_any ;

identifier_literal = identifier_start, identifier_legal+ ; # This is just a name

number_lit = (decimal_number | binary_number | octal_number | hexadecimal_number | any_number) ;
char_lit = apostrophe, identifier_literal?, apostrophe, any, apostrophe, apostrophe ;
string_lit = (apostrophe, identifier_literal)?, quote, any*, quote ;
marked_brack = apostrophe, obrack ;
marked_brace = apostrophe, obrace ;
marked_paren = apostrophe, pparen ;
marked_iden = apostrophe, identifier_literal ;

# Token end
# Syntax start

note = dollar, identifier_literal ;

array_lit = marked_brack, (expression; comma)*, cbrack ;
struct_lit = marked_brace, (expression; comma)*, (identifier_literal, assign, expression); comma)*, cbrace ;
tuple_lit = marked_paren, (expression; comma)*, cparen ;

program_unit = note*, freestatement* ;
freestatement = note*, (importstmt | usingstmt | namespacestmt | declstmt) ;

statement = note*, (semicolon | ifstmt | forstmt | whilestmt | switchstmt | trystmt | 
                    returnstmt | raisestmt | yieldstmt | gotostmt | labelstmt | deferstmt | 
                    breakstmt | continuestmt | usingstmt | namespacestmt | declstmt | assstmt | 
                    expressionstmt | deletestmt | scope) ; 


scopestmt = note*, (semicolon | ifstmt | whilestmt | switchstmt | returnstmt | raisestmt | yieldstmt | gotostmt | 
                    breakstmt | continuestmt | assstmt | expressionstmt | deletestmt | scope) ;

scope = obrace, statement*, cbrace ;

optscope = (do, scopestmt | scope) ;

optvardecls = (vardecl, semicolon)* ;

ifstmt = if, optvardecls, expression, (do, scopestmt | ifscope) ;
ifscope = scope, (else, scopestmt)? ;

forstmt = for, vardecl, in, expression, optscope ;

whilestmt = (whileloopstmt | loopwhilestmt) ;
whilecond = expression, (semicolon, (semicolon, expression))? ;
whiledostmt = while, optvardecls, whilecond, optscope ;
dowhilestmt = loop, optvardecls, optscope, while, whilecond ; 

switchstmt = switch, optvardecls, expression, switchscope ;
switchscope = obrace, note*, casedecl, cbrace ; 
casedecl = (case, (expression; comma)+ | else), (continue | optscope) ;

trystmt = try, statement*, catch, ((e64, identifier_literal)?, switchscope | raise, semicolon) ;

returnstmt = return, ((expression; comma) | identifier), semicolon ; # That identifier is void
raisestmt = raise, (expression | iden, cexpression?), semicolon ;
# yieldstmt = yield, (expression; comma), semicolon ;

# matchstmt = match, expression, matchscope ;
# matchscope = obrace, ((match_lit; comma), optscope)*, cbrace;
# match_lit = [[TBD]] ;

gotostmt = goto, identifier_literal, semicolon ;
labelstmt = label, identifier_literal, semicolon ;

deferstmt = defer, scopestmt ;

breakstmt = break, semicolon ;
continuestmt = continue, semicolon ;

importstmt = import, (compound_identifier_simple, (dot, asterisk)? | string_lit), (as, identifier_literal)?, semicolon ;
usingstmt = using, (cexpression, (dot, asterisk)?), (as, identifier_literal)?, semicolon ; # Constant expression only

namespacestmt = namespace, compound_identifier_simple, namespacescope ; 
namespacescope = obrace, (note*, (usingstmt | namespacestmt | declstmt))*, cbrace ;

declarator = (var | let) ;
type = cexpression ; # Just a nicety
inferrable_type = (cexpression | infer) ;

paramtype = (colon | doublecolon), type ;
rettype = colon, inferrable_type ;

declstmt = (vardecl, semicolon | defstmt) ;
defstmt = def, (funclitdef | structlitdef | unionlitdef | enumlitdef | tuplelitdef) ;

vardecl = declarator, simplevardecl ;
simplevardecl = (((identifier_literal | placeholder)?; comma)+, (colon, inferrable_type)?)+, assignment ;

funclit_or_type = fun, (capture_group, (identifier_literal | placeholder)?, functypesig, scope | (identifier_literal | placeholder)?, functypesig) ;
funclit = fun, capture_group, (identifier_literal | placeholder)?, functypesig, scope ;
funclitdef = fun, capture_group?, identifier_literal, functypesig, scope ;
capture_group = obrack, (pointer, identifier_literal | identifier_literal, (assignment)?; comma) , cbrack ;

functypesig = oparen, (param; comma)*, ((rarrow | srarrow), (return; comma)?, cparen ; 

param = declarator?, (identifier_literal | placeholder)?, paramtype, spread?, (assign, cexpression)? ;
return = (declarator?, (identifier_literal | placeholder)?, rettype)* | infer) ;

structlit = struct, (identifier_literal | placeholder)?, structscope? ;
structlitdef = struct, identifier_literal, structscope ;

structscope = obrace, (note*, (structvardecl, semicolon | defstmt))*, cbrace ;
structvardecl = declarator, (((identifier_literal | placeholder)?; comma)+, ((colon, cexpression)?, assignment | (colon | doublecolon), cexpression, assignment?))+ ;

# Unions should get better

unionlit = union, (identifier_literal | placeholder)?, unionscope? ;
unionlitdef = union, identifier_literal, unionscope ;
unionscope = obrace, (node*, (vardecl, semicolon | funcdecl))*, cbrace ;

enumlit = enum, (identifier_literal | placeholder)?, enumscope? ;
enumlitdef = enum, identifier_literal, enumscope ;
enumscope = obrace, (note*, identifier_literal, (assign, cexpression)?; comma)*, cbrace ;

tuplelit = tuple, (identifier_literal | placeholder)?, tupletypes? ;
tuplelitdef = tuple, identifier_literal, tupletypes ;
tupletypes = oparen, (type*; comma), cparen ;

typeliteral = (u0 | u1 | u8 | u16 | u32 | u64 | s8 | s16 | s32 | s64 | f32 | f64 | c32 | type | any | funclit | structlit | unionlit | enumlit | tuplelit) ;
typeliteral_nofunc =  (u0 | u1 | u8 | u16 | u32 | u64 | s8 | s16 | s32 | s64 | f32 | f64 | c32 | type | any | structlit | unionlit | enumlit | tuplelit) ;

assignment = assign, (expression; comma)+ ;
assstmt = (expression; comma)+, assignment, semicolon ;

deletestmt = delete, (expression; comma)+, semicolon;

expressionstmt = expression, semicolon ;

expression = ternaryexpr ;
ternaryexpr = newexpr, (diamond, expression, colon, expression)? ;
newexpr = (new, (oparen, expression, cparen)?, cexpression, expression | preunaryexpr ) ;

prefixexpr = (prefix_operator*, postfixexpr) ;
postfixexpr = (infixexpr, postifx_operator*) ;
infixexpr = (postcircumfixexpr, (infix_operator, expression | dotexpr)?) ;
postcircumfixexpr = dotexpr, (function_call | access | reorder)* ;

function_call = oparen, ((expression | identifier_literal, assign, expression); comma), cparen ;
access = obrack, expression, cbrack ;
reorder = doublecolon, obrack, (cexpression; comma)+, cbrack ; # ::[]

dotexpr = literalexpr, (dot, expression)? ;

literal = (number_lit | char_lit | string_lit | array_lit | struct_lit | tuple_lit | typeliteral_nofunc | funclit_or_type | false | true | null | nothing) ;

literalexpr = (literal | identifierexpr), select? ;
identifierexpr = (identifier_literal | parenexpr) ;
parenexpr = (oparen, expression, cparen) ;

select = doublecolon, obrack, ((cexpression; comma)+, (identifier_literal, assign, cexpression; comma)* | (identifier_literal, assign, cexpression; comma)+), cbrack ; # ::[]

compound_identifier_simple = identifier_literal, (dot, identifier_literal)* ; # a.b.c.d

cexpression = expression ; # Constant expression