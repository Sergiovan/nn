// This file describes the syntax of nn
//
// This is a comment
// "x" is for x, literally
// x* is 0 or more of x
// x+ is 1 or more of x
// x? is 0 or 1 of x
// x y is x followed by y
// (x) is x
// (x; y) is x* separated by y. Trailing allowed
// (x! y) is x* separated by y. Trailing not allowed
// (x | y) is either x or y

// Better C syntax

type = ("u0" | "u8" | "u16" | "u32" | "u64" | "s8" | "s16" | "s32" | "s64" | "f32" | "f64" | 
        "fun" funtype | "*" type | identifier) ;
funtype = "(" (type; ",") ("->" type)? ")" ;
box = ("const" | "var") ;
block = "{" stmt* "}" ;

program = freestmt* ;

freestmt = (importstmt | usingstmt | defstmt | freevarstmt | externblock) ;

importstmt = "import" importexpr ";" ;
importexpr = identifier ;

usingstmt = "using" identifier "=" identifier ";" ;

defstmt = "def" (structdef | uniondef | enumdef | fundef) ;

structdef = "struct" identifier "{" structbody "}" ;
structbody = structstmt* ;
structstmt = identifier ":" type ";" ;

uniondef = "union" identifier "{" structbody "}" ;

enumdef = "enum" identifier "{" enumbody "}"
enumbody = (enumitem; ",") ;
enumitem = identifier ;

fundef = "fun" identifier funparams block;
funparams = "(" (identifier ":" type; ",") ("->" type)? ")" ;

freevarstmt = box identifier ":" type ("=" expr)? ";" ;

externblock = "extern" identifier "{" fundecl+ "}" ;
fundecl = "fun" identifier funparams ";" ;

stmt = (";" | ifstmt | whilestmt | loopstmt | matchstmt | returnstmt | 
        gotostmt | labelstmt | breakstmt | continuestmt | usingstmt | varstmt | assorexpr | block) ;

ifstmt = "if" expr block else? ;
else = "else" (block | ifstmt) ;

whilestmt = "while" expr block ;

loopstmt = "loop" block ;

matchstmt = "match" exrp matchblock ;
matchblock = "{" case* "}" ;
case = "case" expr block ;

returnstmt = "return" expr ";" ;

gotostmt = "return" identifier ";" ;

labelstmt = "label" identifier ";" ;

breakstmt = "break" ";" ;

continuestmt = "continue" ";" ;

varstmt = freevarstmt ;

assorexpr = expr ("=" expr)? ";" ;

expr = prefixexpr ;
prefixexpr = prefixop* postfixexpr ;
postfixexpr = infixexpr postfixop* ;
infixexpr = postcircumflexexpr* (infixop expr)? ;
postcircumflexexpr = literalexpr (functioncall | access)* ;

functioncall = "(" (expr; ",") ")" ;
access = "[" expr "]" ;

literalexpr = (numberliteral | charliteral | stringliteral | structliteral | 
               "true" | "false" | "null" | identifier | otherexpr) ;
structliteral = "`{" (expr; ",") "}" ;
otherexpr = "(" expr ")" ;