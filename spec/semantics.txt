# From syntax.txt

# Notes
$<identifier_literal> => compiler note. See compiler_notes.txt.

# Keywords 

u0 => type. Void type
u1 => type. Boolean type
u8 => type. Unsigned 8-bit number (byte)
u16 => type. Unsigned 16-bit number
u32 => type. Unsigned 32-bit number
u64 => type. Unsigned 64-bit number
s8 => type. Signed 8-bit number
s16 => type. Signed 16-bit number (short)
s32 => type. Signed 32-bit number (int)
s64 => type. Signed 64-bit number (long)
f32 => type. Single precision floating point number (float)
f64 => type. Double precision floating point number (double)
e64 => type. Error type
c8 => type. Character type (UTF-8)
c16 => type. Character type (UTF-16)
c32 => type. Character type (UTF-32)
type => type. The type type
any => type. Any type

infer => keyword. Infer the type of this.

var => keyword. Declare a variable.
let => keyword. Declare a value.
def => keyword. Syntax helper for declaring a type value. 
    `def <typekeyword> <typename> <type>` is equal to `val <typename>: type = <typekeyword> <typename> <type>;`

if => keyword. Starts an if statement.
else => keyword. Helper keyword for other statements.
for => keyword. Starts a for statement.
loop => keyword. Starts a loop-while statement.
while => keyword. Starts a while statement and helps the loop statement.
do => keyword. Helper keyword.
switch => keyword. Starts a switch statement. 
case => keyword. Starts a case statement.
return => keyword. Starts a return statement.
raise => keyword. Starts a raise statement.
yield => keyword. Reserved.
match => keyword. Reserved. 

break => keyword. Starts a break statement.
continue => keyword. Starts a continue statement.
goto => keyword. Starts a continue statement.
label => keyword. Starts a label statement.
defer => keyword. Starts a defer statement.
try => keyword. Starts a try statement.
catch => keyword. Starts a switch statement.

true => boolean. Value of 1.
false => boolean. Value of 0.
null => *u8. Value of 0.

import => keyword. Starts an import statement.
namespace => keyword. Starts a namespace statement.
as => keyword. Helps other statements.
in => keyword. Helps other statements.
delete => keyword. Starts a delete statement.
this -> ?. Context-dependent pointer to current acting object.
placeholder => keyword. Fantom literal that never generates collisions.

dynamic => keyword. Reserved.
static => keyword. Reserved.
and => keyword. Reserved.
or => keyword. Reserved.

# Symbols

= (assign) => symbol. Used in assignments to separate values from identifiers.
-> (right arrow) => symbol. Used to begin a list of non-compile time returns in a function.
=> (string right arrow) => symbol. Used to being a list of compile time returns in a function.
... (spread) => symbol. Used in parameters to identify spread parameters. Also an operator.
--- (nothing) => symbol. Used to indicate no initialization.
'( => symbol. Starts a tuple literal.
'[ => symbol. Starts an array literal.
'{ => symbol. Starts a struct literal.



# Statements

if => Execute scope only when a given condition evaluates to true. Optionally declare variables for the scope.
binary(op=if, l=condition, r=binary(op=else, l=truescope, r=elsescope|empty)) # Chain them all later
    elsescope => An attached else to an if statement creates an elsescope

for => Execute scope once for each element in a given iterable.
binary(op=for, l=binary(op=in, l=vardecl, r=expression), r=scope)

while => Execute a loop given a certain set of parameters.
binary(op=while, l=binary(op=whilecond, r=condition, l=block(xs=increments)), r=scope)

loop => Execute a loop given a certain set of parameters at least once.
binary(op=loop, l=binary(op=whilecond, r=condition, l=block(xs=increments)), r=scope)

switch => Execute a scope based on the value of an expression.
binary(op=switch, l=value, r=binary(op=case, l=block(xs=block(xs=unary(op=case, n=value) | zero(op=else))), r=block(xs=cases))

try => Execute a blessed scope, jump to catch if any function inside returns a non-zero value of e64
binary(op=try, l=tryblock, r=switch|raise)

return => Returns a value or values from a function. 
unary(op=return, n=block(xs=values))

raise => Returns an error and zeroes all other parameters. Also allows to define a unique name for the error and an error message.
unary(op=raise, n=block(xs=values))

goto => Moves execution to a label. Cannot escape current function. When jumping forwards over declarations, those variables are given the zero value. # Investigate
unary(op=goto, n=label)

label => Creates a label for a goto to jump to. Function-scoped.
unary(op=label, n=label)

defer => Defers execution of a block to the atexit of the current block.
unary(op=defer, n=block)

break => Breaks out of the innermost loop, skipping to the end of it.
zero(op=break)

continue => Jumps back to the beginning of the initial loop, calling any incrementors and incrementing any iterators.
zero(op=continue)

import => Imports names from a different program unit. Can be relative to search paths via dot-separated identifiers or just be a file url. Allows for renaming of imported names.
binary(op=import, l=path, r=alias|empty)

using => Aliases names, making them refer to other names. Does not create new values. It can also add names to the current scope.
binary(op=using, l=path, r=alias|empty)

namespaces => Creates a nested named scope from which elements can be accessed.
binary(op=namespace, l=scope, r=name)

declaration => Declares a name, and may also define it. var is used for variables, and let is used for compile-time constants. Additionally def can be used for syntactic sugar. Compile-time constants may be declared somewhere with a type and defined somewhere else. Multiple declarations in one statement are possible, then one ast node exists per declaration. Names can shadow other names in higher scopes.
binary(op=decl, l=iden, r=value|empty)
    general declaration => All names before a type modifier (: type) are of that type. If no type modifier is given then all types will be inferred from the assignment expression (which must be present)
    pure declaration => Only valid for types and functions. Must be a let declaration, must be typed, and the type must be incomplete. This allows referencing this name.
    type declarations => Type declarations are generally the type type (fun, struct, union, enum, tuple) followed optionally by a name (only used to reference itself) and then the type signature (differs per type) or the content of the type. Type declarations are always compile-time.
        function declarations => Function type signatures can have spread parameters and default parameters. Returns can be named. -> indicates a normal function, => indicates a compile-time function. # This should be changed?
        def declarations => def declarations are required to have a type name and require no semicolon at the end of the declaration, but also cannot have anything else following it.

assignment => Assignes one or more values to one or more expressions. If there's too many values in the form of a combined type at the end the extra values are discarded, but if there's comma-separated values that are not assigned to anything an error (warning?) is raised.
binary(op=assign, l=expr, r=value)

delete => Deallocates the space for one or more pointers. Naked and unique pointers have their value entirely deleted, shared and weak pointers just remove one from the counter.
unary(op=delete, n=block(xs=values))

expression => An expression statement is simply an expression when no other statement exists in the same line.


# Structural

program => The whole program unit. Each file is one program unit. A program unit may be empty.
freestatement => Any statement that may appear at the top level of a program unit. import, using, namespace and declaration statements are valid.

statement => Any statement. Empty, if, for, while, switch, try, return, raise, yield, goto, label, defer, break, continue, using, namespace, declaration, assignment, expression, delete and scope statements are valid.

scopestmt => Any statement that may replace a scope. Empty, if, while, switch, return, raise, yield, goto, break, continue, assignment, expression, delete and scope statements are valid. 

scope => A block of statements between braces. 
block(xs=statements)

optscope => Either a do-scope or a full-on scope. 
block(xs=statements) | target of do-scope

optvardecls => Optional variable declarations separated by semicolons.
block(xs=declaration list .. attached statement)



# Expressions

number_lit => u8/u16/u32/u64/f32/f64. Number literal.
value()

char_lit => c32. Single character, utf32.
value()

string_lit => []c8. String of characters, in utf-8 format.
    With 'u8 => []c8. String of characters, in utf-8 format.
    With 'u16 => []c16. String of characters, in utf-16 format.
    With 'u32 => []c32. String of characters, in utf-32 format.
    With 'c => *u8. String of characters in C format (With null terminator, not an array).
string()

marked_iden => ?. Special identifier.
identifier(marked=true)

array_lit => []t. Returns a value of array type.
compound_literal(xs=value)

struct_lit => struct t. Returns a value of struct type.
compound_literal(xs=value)

tuple_lit => tuple t. Returns a value of tuple type.
compound_literal(xs=value)

function_call ~> ?. Calls a function. All parameters that don't have default values must be supplied. Parameters can be given out of order, but no in-order parameters may be given after an out-of-order one. If a spread parameter exists then it may take any number of arguments.
binary(op=function_call, l=function, r=block(xs=binary(op=param, l=name|empty, r=value)))

access ~> ?. Accesses an element from an array. Can be assigned to. Bound checks?
binary(op=access, l=array, r=element, assignable=true)

reorder ~> ?. Given a generic combination type, reorders the elements in it.
binary(op=reorder, l=expression, r=block(xs=new_order))

dotexpr -> ?. Accesses elements inside other elements, or calls functions. Given the expression x.y, y is first searched first in x as an element, then x dereferenced, then x's type or dereferenced type, then a normal search is done to find a function of the same name that accepts x's type or a pointer to x's type as a first parameter.
unary(op=dot, n=block(xs=elements))

parenthesised expression -> ?. Value is the same as the expression without parenthesis. Only used for precedence calculations.
unary(op=parens, n=expression)

select -> ?. Selects a specific template from a template type.
binary(op=select, l=template type, r=block(xs=binary(op=param, l=name|empty, r=value)))

compound_identifier_simple => Similar to dot expression but simply names something, does not perform any search.
unary(op=dot, n=block(xs=identifiers))



# Operators

const => Fixed operator. 
unary(op=const, n=type, t=$const type)
    const <type> => const type. Returns a constant version of its operand.
    unary(op=const, n=type, t=$const type)

volat => Fixed operator. 
unary(op=volat, n=type, t=$volat type)
    volat <type> => const type. Returns a volatile version of its operand.
    unary(op=volat, n=type, t=$volat type)

as => Fixed operator. 
unary(op=cast, n=t1, t=t2)
    <expr e: t1> as <type t2> -> <expr: t2>. Casts an expression to a different type.
    unary(op=cast, n=e, t=t2)

sizeof => Fixed operator.
unary(op=sizeof, n=type)
    sizeof <type e> => u64. Size of a type in bytes.
    sizeof <expr e> => u64. Size of the type of an expression in bytes.
    unary(op=sizeof, n=e, t=u64)

typeof => Fixed operator. 
unary(op=typeof, n=expr)
    typeof <expr e> => type. Type of an expression.
    unary(op=typeof, n=e, t=type)

typeinfo => Fixed operator. 
unary(op=typeinfo, n=expr)
    typeinfo <expr e: t> => struct typeinfo. Type information of an expression.
    unary(op=typeinfo, n=e, t=struct typeinfo)

new => pseudo-operator. 
binary(op=new, l=n, r=e, t=t)
    new <type *t> ~> <value: *t>. Allocates data for a value of type t and returns a pointer to it.
    new <type !t> ~> <value: !t>. Allocates data for a unique pointer of type t and returns a unique pointer to it.
    new <type +t> ~> <value: +t>. Allocates data for a shared pointer of type t and returns a shared pointer to it.
    new <type [<expr e>]t> ~> <value: [e]t>. Allocates data for an array of values of type t and size e and returns it.
    new (<expr n: u64>) <type t> -> <value: @t>. Allocates data for n values of type @t and returns a pointer to the first one.
    new <type t> <expr e: @t> ~> <value: @t>. Allocates data for a value of type @t, gives it value e and returns a pointer to it.
    binary(op=new, l=n|1, r=e|0, t=t)

? (weak pointer) => operator.
    ? <type t> => ?t. Returns a new type that's a weak pointer to the original type.
    unary(op=weak_pointer, n=t, t=$weakpointerto t)

[] (array, index) => operator.
    [] <type t> => []t. Returns a new type that's an array of the original type of unknown size.
    binary(op=array, l=t, r=empty, t=$arrayof t)

    [<value v: u64>] <type t> => [v]t. Returns a new type that's an array of the original type of size v.
    binary(op=array, l=t, r=v, t=$arrayof t)

    <expr e: []t> [<expr i: u64>] -> <value: t>. Returns the ith element of array e.
    binary(op=index, l=e, r=i, t=t, assignable=true)

() (function call) => operator.
    <expr l> (<expr e1: t1>, <identifier i> = <expr e2: t2>, ...) -> <value: t>, ... . Returns the result of calling r with the arguments between parenthesis.
    binary(op=call, l=l, r=block(xs=unary(op=param, l=empty, r=e1, t=t1):unary(op=param, l=i, r=e2, t=t2):...), t=t)

::[] (reorder, select) => fixed operator.
    <expr l: t1,t2,...> ::[<expr e1>, <expr e2>, ...] -> <value: t1', t2', ...>. Reorders the values in a pure combination type.
    binary(op=reorder, l=l, r=block(xs=binary(param, l=empty, r=e1):binary(op=param, l=empty, r=e2), ...), t=t1',t2', ...)

    <expr l> ::[<expr e1>, <identifier i> = <expr e2>, ...] => <value: t>. Selects a variant of l at compile time.
    binary(op=select, l=l, r=block(xs=binary(param, l=empty, r=e1):binary(op=param, l=i, r=e2)))

+ (shared pointer, addition) => operator.
    + <type t> => +t. Returns a new type that's a shared pointer to the original type.
    unary(op=shared_pointer, n=t, t=$sharedpointerto t)

    <expr l> + <expr r> -> <value: t>. Infix operator for addition.
    binary(op=addition, l=l, r=r, t=t)

- (negate, subtraction) => operator.
    - <expr l> -> <value: t>. Prefix operator for sign negation.
    unary(op=negate, n=l, t=t)

    <expr l> - <expr r> -> <value: t>. Infix operator for subtraction.
    binary(op=negation, l=l, r=r, t=t)

* (pointer, multiplication, addressof) => operator. 
    * <type t> => *t. Returns a new type pointing to the original type. 
    unary(op=pointer, n=t, t=$pointerto t)

    * <expr e: t> -> <value: *t>. Returns address of <expr>. 
    unary(op=addressof, n=e, t=*t)

    <expr l> * <expr r> -> <value: t>. Infix operator for multiplication. 
    binary(op=mul, l=l, r=r, type=t)

/ (floating point division) => operator.
    <expr l> / <expr r> -> <value: f>. Infix operator for division.
    binary(op=div, l=l, r=r, type=f)

// (integer division) => operator.
    <expr l> // <expr r> -> <value: i>. Infix operator for integer division.
    binary(op=intdiv, l=l, r=r, type=i)

++ (increment) => operator.
    <expr e> ++ -> <value: t>. Postfix operator for increment. 
    unary(op=post_increment, n=e, t=t)

    ++ <expr e> -> <value: t>. Prefix operator for increment.
    unary(op=pre_increment, n=e, t=t)

-- (decrement) => operator.
    <expr e> -- -> <value: t>. Postfix operator for decrement. 
    unary(op=post_decrement, n=e, t=t)

    -- <expr e> -> <value: t>. Prefix operator for decrement.
    unary(op=pre_decrement, n=e, t=t)

% (modulo) => operator.
    <expr l> % <expr r> -> <value: i>. Infix operator for modulo.
    binary(op=mod, l=l, r=r, type=i)

@ (at) => operator.
    @ <type t> -> @t. Returns the type got from dereferencing or accessing the given type.
    unary(op=at, n=t, t=@t)

    @ <expr e: t> -> <value: @t>. Dereferences the value of the given expression. Can be assigned to.
    unary(op=at, n=e, t=@t, assignable=true)

.. (concat) => operator.
    <expr l> .. <expr r> -> <value: t>. Infix operator for concatenation.
    binary(op=concat, l=l, r=r, type=t)

~ (length) => operator.
    ~ <expr e> -> <value: t>. Prefix operator for length.
    unary(op=length, n=e, t=t)

< (less than) => operator.
    <expr l> < <expr r> -> <value: t>. Infix operator for ordering. 
    binary(op=lt, l=l, r=r, t=t)

<= (less or equal than) => operator.
    <expr l> <= <expr r> -> <value: t>. Infix operator for ordering.
    binary(op=le, l=l, r=r, t=t)

<< (shift left) => operator.
    <expr l> << <expr r> -> <value: t>. Infix operator for shifting left. 
    binary(op=shl, l=l, r=r, t=t)

<<< (rotate left) => operator.
    <expr l> <<< <expr r> -> <value: t>. Infix operator for rotating left. 
    binary(op=rtl, l=l, r=r, t=t)

> (greater than) => operator.
    <expr l> > <expr r> -> <value: t>. Infix operator for reverse ordering. 
    binary(op=gt, l=l, r=r, t=t)

>= (greater or equal than) => operator.
    <expr l> >= <expr r> -> <value: t>. Infix operator for ordering.
    binary(op=ge, l=l, r=r, t=t)

>> (shift right) => operator.
    <expr l> >> <expr r> -> <value: t>. Infix operator for shifting right. 
    binary(op=shr, l=l, r=r, t=t)

>>> (rotate right) => operator.
    <expr l> >>> <expr r> -> <value: t>. Infix operator for rotating right. 
    binary(op=rtr, l=l, r=r, t=t)

<<| (Set bit) => operator.
    <expr l> <<| <expr r> -> <value: t>. Infix operator for bit setting. 
    binary(op=setbit, l=l, r=r, t=t)

<<& (Clear bit) => operator.
    <expr l> <<& <expr r> -> <value: t>. Infix operator for bit clearing. 
    binary(op=clearbit, l=l, r=r, t=t)

<<^ (toggle bit) => operator.
    <expr l> <<^ <expr r> -> <value: t>. Infix operator for bit toggling. 
    binary(op=togglebit, l=l, r=r, t=t)

<<? (check bit) => operator.
    <expr l> <<? <expr r> -> <value: bool>. Infix operator for bit checking. 
    binary(op=checkbit, l=l, r=r, t=t)

& (bitwise and) => operator.
    <expr l> & <expr r> -> <value: t>. Infix operator for bitwise and.
    binary(op=band, l=l, r=r, t=t)

&& (logical and) => operator.
    <expr l> && <expr r> -> <value: t>. False if l as bool is false, else r as bool.
    binary(op=land, l=l, r=r, t=t)

| (bitwise or) => operator.
    <expr l> | <expr r> -> <value: t>. Infix operator for bitwise or.
    binary(op=bor, l=l, r=r, t=t)

|| (logical or) => operator.
    <expr l> || <expr r> -> <value: t>. True if l as bool is true, else r as bool.
    binary(op=lor, l=l, r=r, t=t)

^ (bitwise xor) => operator.
    <expr l> ^ <expr r> -> <value: t>. Infix operator for bitwise xor.
    binary(op=bxor, l=l, r=r, t=t)

! (unique pointer, bitwise not) => operator.
    ! <type> => !t. Returns a new unique pointer type pointing to the original type.
    unary(op=unique_pointer, n=type, t=$uniquepointerto t)

    ! <expr e> -> <value: t>. Prefix operator for bitwise not.
    binary(op=bnot, n=e, t=t)

!! (logical not) => operator.
    !! <expr e> -> <value: t>. Prefix operator for logical not.
    unary(op=lnot, n=e, t=t)

== (equals) => operator.
    <expr l> == <expr r> -> <value: t>. Infix operator for equality comparison.
    binary(op=equals, l=l, r=r, t=t)

!= (not equals) => operator.
    <expr l> != <expr r> -> <value: t>. Infix operator for inequality comparison.
    binary(op=nequals, l=l, r=r, t=t)

... (spread) => Fixed operator. 
    ...<expr n> => <expr: t1>, <expr: t2>, <expr: t3>, ... . Spreads an expression into a comma-separated list of expressions. Valid for structs, tuples and arrays. For arrays, the length must be known at compile time or they must be spread into other arrays.
    unary(op=spread, n=n, t=t1:t2:t3:...)

<> (diamond) => Fixed operator. 
    <expr choice: u1> <> <expr e1: t> : <expr e2: t> => <reference: t>. Chooses between 2 expressions.
    binary(op=diamond, l=choice, r=binary(op=choice, l=e1, r=e2, t=t), t=t, assignable=true)