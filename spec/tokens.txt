// Comment
/* Multiline comment */

// Primitive type keywords
u8 // unsigned 8-bit
u16 // unsigned 16-bit
u32 // unsigned 32-bit
u64 // unsigned 64-bit
s8 // signed 8-bit
s16 // signed 16-bit
s32 // signed 32-bit
s64 // signed 64-bit
f32 // floating point single precision
f64 // floating point double precision
c8  // character 8-bit
c16 // character 16-bit
c32 // character 32-bit
b8 // generic 8-bit data
b16 // generic 16-bit data
b32 // generic 32-bit data
b64 // generic 64-bit data
void
bool
err
any // any type
type // type type
no_return
null_type
struct
union
enum
fun // function
infer

// Box keywords

let // variable
def // define
mut // mutable
ref // reference
align // Align box

// Control flow keywords
if 
then 
else
while
loop
for
match
case
break
continue
yield
try
catch
raise

// Operator keywords
typeof
sizeof
as
is
and
or
not

// Literal keywords
true
false
null
nothing
never
self
Self

// Other keywords
import
export
alias
pub
const // Means Compile-time, not immutable
inline
delete
copy
move
_
namespace

// Reserved keywords
extern
defer
async
await
static
dynamic
asm // assembly block
operator
in
gen // Generator
lambda
unsafe
from

// Symbols
+ // Add, Shared pointer
++ // Increment
- // Negate, subtract
-- // Decrement
= // Assign
== // Equals
!= // Not equals
> // Greater than
>> // Shift right
< // Less than
<< // Shift left
>= // Greater or equal than
<= // Less or equal than, strong arrow left
=> // Strong arrow right
( // Open paren
) // Close paren
{ // Open brace
} // Close brace
'{ // Open struct literal
({ // Open expression block
}) // Close expression block
[ // Open bracket
] // Close bracket
'[ // Open array literal
, // Comma
. // Access
.. // Concatenate
... // Spread, destructure
// .{ // Swizzle psudo-operator
// .[ // Constant access pseudo-operator
: // Of type
:: // Select
// ::* // Select all pseudo-operator
// ::{ // Select multiple pseudo-operator
-> // Return type, Arrow right
<- // Move, Arrow left
! // Bitwise not
!! // Logical not
@ // Dereference
# // Hash
% // Modulo
^ // Binary xor
^^ // Logical xor
& // Binary and
&& // Logical and
| // Binary or
|| // Logical or
@^ // Flip bit at
@& // Unset bit at
@| // Set bit at
@? // Check bit at
* // Pointer to, multiply, address of
~ // Info
; // Semicolon
/ // Divide
? // Propagate
<> // Diamond
~> // Weak arrow right
<~ // Weak arrow left
|> // Pipe right
<| // Pipe left
?? // Nullish coalescence

+= // Plus equals
-= // Minus equals
*= // Times equals
/= // Divide equals
%= // Modulo equals
<<= // Shl equals
>>= // Shr equals
&= // And equals
|= // Or equals
^= // Xor equals
@^= // Flip bit equals
@&= // Clear bit equals
@|= // Set bit equals
..= // Concatenate equals

// Literals (regexish)
0x[0-9a-fA-F]+ // Hexadecimal
0o[0-7]+ // Octal
0b[01]+ // Binary
\d(\d|_\d|'\d)* // Decimal
\d(\d|_\d|'\d)*\.\d(\d|_\d|'\d)* // Float

\\. // Char
[_a-zA-Z][_a-zA-Z0-9]+' // Identifier literal
"([^"]|`")+" // String literal

// Identifiers
[_a-zA-Z][_a-zA-Z0-9]+
$"([^"]|`")+"

// Notes
$[
$[_a-zA-Z0-9]+
