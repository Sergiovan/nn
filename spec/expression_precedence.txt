# Expressions are reordered after they are entirely parsed
# Their precedence goes from 0x7F (highest) to 0x0 (lowest).
# Negative precedence means no precedence or already ordered
# Operators with the same preference are not reordered

# Here all operators are sorted by precedence

(x) : -1
identifier : -1
literal : -1
x.y : -1

x++, x--, x(y), x[y], x as y : 0x3F
...x : 0x3E
x::[y]  : 0x3D
++x, --x, -x, ~x, !x, !!x, @x, *x, ?x, [y]x, +x, typeof x, sizeof x, const x, volat x  : 0x3C
x * y, x / y, x // y, x % y  : 0x3B
x + y, x - y, x .. y  : 0x3A
x << y, x >> y, x <<< y, x >>> y  : 0x39
x <<| y, x <<& y, x <<^ y, x <<? y  : 0x38
x & y  : 0x37
x | y  : 0x36
x ^ y  : 0x35
x < y, x <= y, x > y, x >= y  : 0x34
x == y, x != y  : 0x33
x && y  : 0x32
x || y  : 0x31

new (y) x: z : -1
x ?? y <> z : 0x00