# Token to AST is the first pass
# This file describes the results and AST structure of running this pass on a token stream
# as well as which/how notes are processed during this pass

letter => N/A
digit => N/A
bindigit => N/A
octdigit => N/A
hexdigit => N/A
whitespace => N/A
symbol => N/A
symbol_extended => N/A

underscore => N/A
dollar => N/A
apostrophe => N/A
quote => N/A
semicolon => N/A
dot => N/A
comma => N/A
colon => N/A
doublecolon => N/A
asterisk => N/A

other => N/A
identifier_start => N/A
identifier_legal => N/A
any => N/A

u0 => nntype(u0, t=type)

u8  => nntype(u8, t=type)
u16 => nntype(u16, t=type)
u32 => nntype(u32, t=type)
u64 => nntype(u64, t=type)

s8  => nntype(s8, t=type)
s16 => nntype(s16, t=type)
s32 => nntype(s32, t=type)
s64 => nntype(s64, t=type)

e64 => nntype(e64, t=type)

f32 => nntype(f32, t=type)
f64 => nntype(f64, t=type)

u1 => nntype(u1, t=type)

c8 => nntype(c8, t=type)
c16 => nntype(c16, t=type)
c32 => nntype(c32, t=type)

type => nntype(type, t=type)
any => nntype(any, t=type)

fun => N/A
struct => N/A
union => N/A
enum => N/A
tuple => N/A

infer => nntype(infer, t=type)

var => N/A
let => N/A
ref => N/A
def => N/A

const => N/A
volat => N/A

pointer => N/A
upointer => N/A
spointer => N/A
wpointer => N/A
any_pointer => N/A

if => N/A
else => N/A
for => N/A
loop => N/A
while => N/A
do => N/A
switch => N/A
case => N/A
return => N/A
raise => N/A
yield => N/A
match => N/A

break => N/A
continue => N/A
goto => N/A
label => N/A
defer => N/A
try => N/A
catch => N/A

true => value(1, t=u1)
false => value(0, t=u1)
null => value(0, t=null)

import => N/A
using => N/A
namespace => N/A
as => N/A
in => N/A
new => N/A
delete => N/A
this => zero(this)
placeholder => zero(placeholder)
sizeof => N/A
typeof => N/A
typeinfo => N/A

dynamic => N/A
static => N/A
and => N/A
or => N/A

operator => N/A
prefix_operator => N/A
postfix_operator => N/A
infix_operator => N/A
post_circumfix => N/A

assign => N/A
opandassign => N/A

oparen => N/A
cparen => N/A
obrace => N/A
cbrace => N/A
obrack => N/A
cbrack => N/A
lt     => N/A
gt     => N/A
rarrow => N/A
srarrow => N/A
spread => N/A
diamond => N/A
question => N/A
dquestion => N/A
nothing => value(0, t=nothing)

dseparator => N/A
simple_number => N/A
simple_binary => N/A
simple_octal => N/A
simple_hex => N/A
simple_any => N/A

decimal_number => value(decimal_number, t=u64|f32|f64)
binary_number => value(binary_number, t=u64)
octal_number => value(octal_number, t=u64)
hexadecimal_number => value(hexadecimal_number, t=u64)
# any_number => N/A

identifier_literal => iden(nullptr)

number_lit => value(decimal_number, t=u64|f32|f64)
char_lit => value(char_lit, t=c32)
string_lit => string(string_lit, t=[n]c8)
marked_brack => N/A
marked_brace => N/A
marked_paren => N/A
marked_iden => N/A

note => Dropped ; TODO

array_lit => compound(xs=expression)
struct_lit => compound(xs=binary(SP_NAMED, expression[iden]|none, expression))
tuple_lit => compound(xs=expression)

program_unit => block(xs=freestatement)
freestatement => usingstmt|importstmt|namespacestmt|declstmt

statement => ifstmt|forstmt|whilestmt|switchstmt|trystmt|returnstmt|raisestmt|gotostmt|labelstmt|deferstmt|breakstmt|continuestmt|usingstmt|namespacestmt|deletestmt|declstmt|assorexpr|scope|none

scopestmt => ifstmt|forstmt|whilestmt|switchstmt|returnstmt|raisestmt|gotostmt|breakstmt|continuestmt|deletestmt|assorexpr|scope|none

scope => block(xs=stmt)

optscope => scopestmt|scope

optvardecls => block(xs=vardecl)

ifstmt => binary(if, block(xs={optvardecls, (condition) expression}, binary(else, (ifblock) scopestmt, (elseblock) scopestmt|none)))
ifscope => N/A ; Integrated in ifstmt

forstmt => binary(for, binary(in, (elem) vardecl, (elems) expression), (body) optscope)

whilestmt => whiledostmt|dowhilestmt
whilecond => block(xs={(condition) expression, (incrementors) assorexpr...})
whiledostmt => binary(while, binary(SP_COND, optvardecls, whilecond), optscope)
dowhilestmt => binary(loop, binary(SP_COND, optvardecls, assorexpr), optscope)

switchstmt => binary(switch, block(xs=(decls ) vardecl..., (condition) expression), switchscope)
switchscope => block(xs=casedecl)
casedecl => 
            binary(case, (values) block(xs=expression), (body) zero(continue)|optscope) | 
            binary(else, none, (body) zero(continue)|optscope)

trystmt => binary(try, (trybody) block(stmt), binary(catch, (error) identifier|none, (catchbody) switchscope|zero(raise)))

returnstmt => unary(return, block(xs=expression))
raisestmt => unary(raise, block(xs={expression, expression[string]}))
# yieldstmt

# matchstmt
# matchscope
# match_lit

gotostmt => unary(goto, identifier)
labelstmt => unary(label, identifier)

deferstmt => unary(defer, identifier)

breakstmt => zero(break)
continuestmt => zero(continue)

importstmt => binary(import, (what) compound_identifier_simple|string, (as) none|identifier, t=typeless)
usingstmt => binary(using, (what) expression, (as) none|identifier, t=typeless)

namespacestmt => binary(namespace, (name) compound_identifier_simple, namespacescope)
namespacescope => block(xs=usingstmt|namespacestmt|declstmt)

declarator => N/A
_type => unary(:, cexpression[type])
inferrable_type => unary(:, cexpression[type]|nntype(infer, t=type))

paramtype => N/A
rettype => N/A

declstmt => defstmt|vardecl
defstmt => unary(def, funcdef|structtypelitdef|uniontypelitdef|enumtypelitdef|tupletypelitdef)

maybe_identifier => identifier|zero(placeholder)

vardecl => unary(var|let|ref, simplevardecl)
simplevardecl => binary(def, 
    (decls) block(xs=binary(def, 
        (names) block(xs=identifier|zero(placeholder)), 
        (type) inferrable_type|unary(:, nntype(infer, t=type))
    )), 
    (values) assignment|none
) ; Simple my ass

functype => binary(fun, (name?) maybe_identifier, (type) functypesig)
funclit_or_type => funclit|binary(fun, (name?) maybe_identifier, (type) functypesig)
funclit => compound(xs=[(capture) capture_group, (name?) maybe_identifier, (type) functypesig, (body) scope], t=NONE_FUNCTION)
funcdef => compound(xs=[(capture?) capture_group|zero(SP_CAPTURE), (name) identifier, (type) functypesig, (body) scope], t=NONE_FUNCTION)
capture_group

functypesig => binary(:, 
    (params) compound(xs=param), 
    (returns) unary(->|=>, nntype(infer, t=type)|compound(xs=return))
)

param => binary(var|let|ref, 
    (namevalue) binary(=, (name?) maybe_identifier|expression[identifier], (value?) expression|none), 
    (type) binary(:|::, (type) _type, (spread) zero(spread)|none)
)
return => binary(var|let|ref, (name?) maybe_identifier|expression[identifier], (type) inferrable_type)

structtypelitdef => binary(struct, (name) identifier, (body) structscope)

structscope => block(xs=defstmt|structvardecl)
structvardecl => binary(def, 
    (decls) block(xs=binary(def, 
        (names) block(xs=identifier|zero(placeholder)), 
        (type) _type|unary(:|::, nntype(infer, t=type))
    )), 
    (values) assignment|none
) ;

# Unions should get better

uniontypelitdef => binary(union, (name) identifier, (body) unionscope)
unionscope => block(xs=defstmt|vardecl)

enumtypelitdef => binary(enum, (name) identifier, (body) enumscope)
enumscope => block(xs=binary(SP_NAMED, (name) identifier, (value?) expression|none))

tupletypelit => binary(tuple, (name?) maybe_identifier, (body) tupletypes)
tupletypelitdef => binary(tuple, (name) identifier, (body) tupletypes)
tupletypes => block(xs=_type)

typelit => N/A ; Not used
typelit_nofunc => u0|u1|u8|u16|u32|u64|s8|s16|s32|s64|f32|f64|c8|c16|c32|kwtype|any|tupletypelit

assignment => block(xs=expression)
assstmt => binary(=, (assignees) block(xs=expression), (values) block(xs=expression)) ; Or any other op-assign operator

deletestmt => unary(delete, block(xs=expression))

expressionstmt => expression

assorexpr => expression|assignment

expression => ternaryexpr
ternaryexpr => newexpr|binary(??, (condition) newexpr, binary(<>, (iftrue) expression, (iffalse) expression))
newexpr => prefixexpr|binary(new, (value) expression|none, (type) binary(*, (type) expression, (amount) expression|value(1)))

prefixexpr => unary(symbol, expression)|binary([, (size) expression|none, expression)|postfixexpr
postfixexpr => infixexpr|unary(symbol, postfixexpr, post=true)
infixexpr => dotexpr|binary(symbol, (lhs) dotexpr, (rhs) expression)

dotexpr => postcircumfixexpr|unary(., block(xs={postcircumfixexpr...,zero(mul)?}))

postcircumfixexpr => literalexpr|binary('('|[|{, literalexpr, function_call|access|reorder)

function_call => block(xs=binary(SP_NAMED, expression[identifier]|none, expression))
access => expression
reorder => block(xs=cexpression[identifier|number])

literal => N/A ; Integrated in literalexpr

literalexpr => identifierexpr|number|string_lit|char_lit|array_lit|struct_lit|tuple_lit|nothing|false|true|null|funclit_or_type|this|placeholder|typelit_nofunc|binary(::[, literalexpr, select)
identifierexpr => parenexpr|identifier
parenexpr => unary('(', expression)

select => block(xs=binary(SP_NAMED, cexpression[identifier]|none, expression))

compound_identifier_simple => unary(., block(xs={identifier..., zero(*)}))

cexpression => N/A ; Simply constant expression