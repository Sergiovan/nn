import std;

def struct trie {
	var value: c32 = ''\0';
	var children: [2]*trie = '[null, null];
	
	def fun add(key: []c8, value: c32, pos: s32 = 0) {
		if pos == ~key {
			this.value = value;
		} else {
			var idx: s32 = 0;
			if key[pos] == ''-' {
				idx = 1;
			}
			if !!children[idx] {
				children[idx] = new *trie;
			}
			children[idx].add(key, value, pos + 1);
		}
	}
	
	def fun get(key: []c8, pos: s32 = 0 -> c32) {
		if pos == ~key {
			return value;
		} else {
			var idx: s32 = 0;
			if key[pos] == ''-' {
				idx = 1;
			}
			if !!children[idx] {
				return ''?';
			} else {
				return children[idx].get(key, pos + 1);
			}
		}
	}
	
	def fun clear() {
		if children[0] {
			children[0].clear();
			delete children[0];
			children[0] = null;
		}
		if children[1] {
			children[1].clear();
			delete children[1];
			children[1] = null;
		}
	}
}

let diff: u64 = ''z' as u64 - ''a' as u64;
let dist: u64 = ''A' as u64 - ''a' as u64;
let morse: [diff][]c8 = '[
	".-", "-...", "-.-.", "-..", ".", 
	"..-.", "--.", "....", "..", ".---", 
	"-.-", ".-..", "--", "-.", "---", 
	".--.", "--.-", ".-.", "...", "-", 
	"..-", "...-", ".--", "-..-", "-.--", 
	"--.."
];

let morse_dict: trie;

def fun morse_to_english(words: [][]c8 -> []c8) {
	let ret: []c8 = "";
	for var word in words {
		if word == "/" {
			ret ..= " ";
		} else {
			ret ..= morse_dict.get(word);
		}
	}
	return ret;
} 

let lowercase: fun(str: *[]c8);

def fun english_to_morse(words: [][]c8 -> []c8) {
	var ret: []c8 = "";
	for var word in words {
		lowercase(*word);
		for var c in word {
			var idx: u64 = c as u64 - ''a' as u64;
			ret ..= morse[idx] .. '' ';
		}
		ret ..= "/ ";
	}
	return ret;
}

def fun lowercase(str: *[]c8) {
	while var i = 0; i < ~@str; ++i {
		var c = (@str)[i];
		if c >= ''A' && c <= ''Z' {
			(@str)[i] = (c as u64 - dist) as c8;
		}
	}
}

def fun split(inn: []c8, by: c8 = '' ' -> [][]c8) {
	var ret: []c8 = '[];
	var cur: []c8 = "";
	for var c in inn {
		if c != ' ' {
			cur ..= c;
		} else if ~cur {
			ret ..= cur;
			cur = "";
		}
	}
	return ret;
}

def fun join(inn: []c8, with: c8 = '',' -> []c8) {
	var ret: []c8 = "";
	for var str in inn {
		ret ..= str .. with;
	}
	return ret;
}

def fun main([]c8) {
	using std.io.*;
	defer morse_dict.clear();
	var inn: []c8 = "";
	while !!~inn {
		print("Enter english or morse: ");
		inn = read();
	}
	
	let words: []c8 = inn.split();
	if words[0][0] == ''.' || words[0][0] == ''-' {
		# We morse bois
		words.morse_to_english().print();
	} else {
		# It's that pesky english
		words.english_to_morse().print();
	}
	
	return 0;
}