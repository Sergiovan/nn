def fun example() {
	1;
	10;
	10.0;
	10e+23;
	10f;
	10.0f;
	10e+23f;
	1_0;
	1'0;
	0b;
	0b0;
	0b1;
	0b12;
	0o;
	0o1;
	0o01234567;
	0o789;
	0x1;
	0x;
	0x1234567890ABCDEFabcdef;
	0xfghi;
	'1;
	_1;
	a;
	aa;
	a_a;
	a';
	a1;
	_;
	_a;
	'a;
	# \
	asd;
	a+a;
	a++a;
	a+;!@%$^%^*;a;
	a+";"+a;
	"hello\"";
	''\'';
	'c32"Do more thing";
	'c"Dothing";
	'stongth;
	'();
	'a();
	'{};
	'a{};
	'[];
	'a[];
	'['('{"'"})];
}

let foo: fun(-> :s32);
def fun foo(-> :s32) {
	return 1;
}

def fun foo(a: s32 -> :s32) {
	return a;
}

def fun foo(a: s32, b :s32... -> :s32, :e64) {
	if a > ~b {
		raise NO_WAY;
	}
	return b[~b - a];
}


def fun baz(a: s32, b: s32...) {
	return;
}

def fun fooo(a: s32 -> :s32) {
	return a;
}

let name: struct;
def struct name {
	a: f32;
	b: f64;
	c : s32;
	d: []c64;

	$constructor 
	def fun foo() {
		return 0;
	}
}

def union uname {
	a: s32 = 3;
	b: f32;
}

def enum cutlery {
	FORK, SPOON, SPORK, TINY_ONE_POINT_FORK
}

$main
#> #> Yay, comments! <# <#
main(arg: [][]u8 -> :s32) { 
	var arr: []s32 = '[1, 2, 3, 4, 5, 6];
	
	defer if ~arg > 2 {
		arr[2] = 7;
	} else {
		arr[2] = 36;
	}

	def enum not_cutlery {WHAT, IS, THIS}
	
	var c: cutlery = cutlery.SPOON;
	
	using cutlery as _c;

	c = _c.SPORK;

	$fake 
	using s32 as i32;
	using []*s32 as api32;
	using fun(:s32 -> :s32) as fun_foo;

	var huh: i32 = 1;
	var okay: s32 = 2;
	var nyeom: api32 = '[null, null, null];
	$unreal 
	var a: fun_foo = fooo;

	a(2);

	okay = huh;

	using _c.*;
	c = TINY_ONE_POINT_FORK;

	def fun bar(-> :s32) {
		raise X_2;
	}
	
	try
		var in_try: s32 = 69;
		bar();
	catch sig b {
		case bar.X_2 {
			;
		}
		else {
			if b != bar.X_2 {
				raise THIS_AINT_GOOD;
			}
		}
	}

	in_try = -1;
	
	switch c {
		case cutlery.FORK, cutlery.SPOON {
			return -1;
		}
		case cutlery.SPORK continue;
		else do break;
	} 
	
	var sol: s32 = -~arr as s32;
	for var i: s32 in arr {
		sol += i;
	}
	
	while var i: s32 = 5; --i < 0 {
		;
	}

	while var i: s32 = 0; i < 5; ++i; i += 1 {
		sol *= i;
	}
	
	{
		var a: *s32 = new *s32;
		var b: []s32 = new [10]s32;
		delete a;
		delete b;
		goto leave;
		var c: *s32 = new 10: s32;
		var d: *s32, e: []s32 = new 1: *s32, new '[2, 3, 4, 5, 6]: [5]s32;
		delete c, d;
	}
	label leave;
	# leave;
	
	var gone: s32 = 0;
	label whoops;
	gone++;
	if gone < 2 {
		goto whoops;
	} else {
		goto better;
	}
	
	label better;
	
	var one: s32, two: f32 = 1, 2 as f32;
	
	while var itwo: s32 = two as s32; one > 0 {
		one -= itwo;
	}
	
	var sname: name = {1.0f, 2f, 5, "Hello!"};
	var three: f32 = sname.a;
	
	var un: uname;
	un.a = 4;
	three = un.b;

	var nothing: s32 = ---;
	var namefoo: s32 = sname.foo();
	namefoo.foo();
	
	var boolean: u1 = false;

	var laster: s32, err: e64 = foo(2, 1, 2, 3, 4, 5);
	laster, err = foo(2, (fun [] wee(){return 1, 2, 3, 4, 5;})());
	baz(a = 2, b = [1, 2, 3, 4, 5]);

	var ca: s32 = 1;
	var cb: s32 = 2;

	var pc = (fun [*ca, *cb] sum() {@cb = @ca + @cb;});
	pc();
	pc();

	var func1: fun(-> :u0) = (fun [] func(){});
	var func2: fun(:s32 -> u0) = (fun [] func(a: s32){});

	func2(2);

	if err || err == foo.NO_WAY {
		return -69;
	}
	
	var some_char: c32 = ''b';
	var some_string: []c8 = "Do me this favor";
	
	def struct nested {
		var a: s32;
	}

	def struct nest {
		var b: nested;
	}

	var d: nest;
	d.b.a = 1;

	if true {
		return 1;
		return 2;
	} else if nothing == 0 {
		raise BAD_STUFF;
	} else {
		raise WHAT_THE_FUCK;
	}
	return 0;
}