int foo();
int foo() {
	return 1;
}

int foo(int a) {
	return a;
}
int:sig foo(int a, int... b) {
	if a > ~b {
		raise NO_WAY;
	}
	return b[~b - a];
}

int fooo(int a) {
	return a;
}

struct name;

struct name {
	float a;
	double b;
	int c : 8;
	string d;
	int foo() {
		return 0;
	}
}

union uname {
	int a = 3;
	float b;
}

enum cutlery {FORK, SPOON, SPORK, TINY_ONE_POINT_FORK}

# $main
#> #> Yay, comments! <# <#
int main(string[] arg) { 
	int[] arr = [1, 2, 3, 4, 5, 6];
	
	defer if ~arg > 2 {
		arr[2] = 7;
	} else {
		arr[2] = 36;
	}

	enum not_cutlery {WHAT, IS, THIS}
	
	cutlery c = cutlery.SPOON;
	
	using cutlery as _c;

	c = _c.SPORK;

	using int as i32;
	using int*[] as api32;
	using fun<int(int)> as fun_foo;

	i32 huh = 1;
	int okay = 2;
	api32 nyeom = [null, null, null];
	fun_foo a = fooo;

	okay = huh;

	using _c.*;
	c = TINY_ONE_POINT_FORK;

	int bar() {
		raise X_2;
	}
	
	try:
		bar();
	catch (sig b) {
		else {
			if b != bar.X_2 {
				raise THIS_AINT_GOOD;
			}
		}
	}
	
	switch c {
		case cutlery.FORK {
			return -1;
		}
		case cutlery.SPORK continue;
		else do break;
	} 
	
	int sol = <int> -~arr;
	for int i : arr {
		sol += i;
	}
	
	for int i = 1, 4 {
		sol -= i;
	}
	
	for int i = 0; i < 5; ++i {
		sol *= i;
	}
	
	{
		int* a = new int;
		int[] b = new int[10];
		delete a;
		delete b;
		leave;
		int* c = new int{10};
	}
	
	# leave;
	
	int gone = 0;
	label whoops;
	gone++;
	if gone < 2 {
		goto whoops;
	} else {
		goto better;
	}
	
	label better;
	
	int one, float two = 1, <float> 2;
	
	while int itwo = <int> two; one > 0 {
		one -= itwo;
	}
	
	name sname = {<float> 1, <float> 2, 5, "Hello!"};
	float two = sname.a;
	
	uname un;
	un.a = 4;
	two = un.b;

	int nothing = ---;
	int namefoo = sname.foo();
	namefoo.foo();
	
	bool boolean = false;

	int laster, sig err = foo(2, 1, 2, 3, 4, 5);
	laster, err = foo(2, (let wee(){return 1, 2, 3, 4, 5;})());
	
	if err || err == foo.NO_WAY {
		return -69;
	}
	
	char some_char = 'b';
	string some_string = "Do me this favor";
	
	if true {
		return 1;
	} else if nothing == 0 {
		raise BAD_STUFF;
	} else {
		raise WHAT_THE_FUCK;
	}
}