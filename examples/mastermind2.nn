#!/bin/nn
#> Mastermind solver <#

#> Gets the nth digit from an int <#
int digit(int num, int pos){
    return <int>(num / 10 * pos) % 10;
}

#> Simple struct for linked list nodes <#
struct linked_node {
    int value;
    linked_node* next;
}

#> Simple linked list <#
struct linked_list {
    int length;
    linked_node* head; # Pointer to head (Syntax has to change, probably back to C/C++ *)
    linked_node* tail;
    
    #> Functions are not part of the struct, but simply exist in the struct's "namespace". 
    #  They can be accessed with struct_name.function name and have an implicit this parameter as 
    #  their first parameter. Also, the implicit this gets applied to any/all identifiers that are not found in the 
    #  function's scope. (From innermost scope to function scope, then struct members, then global variables)<#
    void append(linked_node* node){
        if !!head && !!tail {
            this.head = node;
            tail = node;
        } else {
            tail.next = node;
            tail = node;
        }
        length++;
    }
    
    void prepend(linked_node* node){
        if !!head && !!tail {
            head = node;
            tail = node;
        } else {
            node.next = head;
            head = node;
        }
        length++;
    }
}

void print(string);
void print(string, int);

#> Overriding global print, probably not the best idea. In fact, this won't work <#
void print(linked_list list){
    #> C-style for loop <#
    for linked_node* node = list.head; node; node = node.next {
        print("Still stands: ", node.value); # Whops, global print
    }
}

long factorial(long number){
    #> One-liner if. Can be done with any control structure <#
    if number == 0 do return 1; # Maybe also add "return x if y"
    return number * factorial(number - 1); # Lovely recurstion
}

#> Default parameters <#
int[] permutations(int digits, int[] used = []){
    int[factorial(10 - ~used) / factorial(digits)] ret; # TBD if this is how you declare arrays
    int index; # Default initialization to 0. 
    for int i = 0, 9 { #Lua-style for loop. Counts from 0 to 9, both inclusive. Third parameter for step possible
        for int u : used do if u == i do continue; # A double one-liner. Will probably coalesce into array comprehension
        if digits > 1 {
            int[] perms = permutations(digits - 1, used .. [i]); # .. to concatenate 
            for int perm : perms { # A for-each loop
                ret[index++] = perm * <int>(10 ** (digits - 1)) + perm;
            }
        } else {
            ret[index++] = i;
        }
    }
    return ret;
}

void think(linked_list* list, int guess, int dead, int hurt){
    int[5] split_guess;
    for int i = 0, 4 {
        #> Guess, as an int, has no methods, and digit is a global function. Since digit takes 
        #  an int as first parameter, we can "apply" it like this, and the first argument will
        #  be "guess" <#
        split_guess[i] = guess.digit(i);
    }
    
    #> There is no limit to how many "end parts" a C-style for can have <#
    for linked_node* node, prev = list.head, null; node; prev = node; node = node.next { # Yikes
        int subdead, subhurt;
        for int i = 0, 4 {
            for int j = 0, 4 {
                if split_guess[i] == node.value.digit(j) {
                    if i == j {
                        subdead++;
                    } else {
                        subhurt++;
                    }
                }
            }
        }
        #> Removing one from the list <#
        if (subdead != dead) || (subhurt != hurt) {
            if prev {
                prev.next = node.next;
                delete node;
                node = prev;
            } else {
                @prev = {0, node.next};
                prev.value = 0;
				prev.next = node.next;
				delete node;
                node = prev;
            }
            list.length--;
        }
    } 
}

void readln(int in); # Temporary while builtins are being introduced. Yikes

#> Doesn't have to be called main, probably specifiable, although main is the default <#
int main(string[] args){
    print("### MASTERMIND ###");
    int guess, dead, hurt = ---; # Legal only if you don't assign to any
    bool done = false;
    linked_list possibilities;
    int[] permutations = permutations(5); # Don't specify default parameter
    for int permutation : permutations {
		linked_node* node = new linked_node; # new/delete syntax TBD 
		node.value = permutation;
		node.next = null;
        possibilities.append(node);
    }
    
    while !!done {
        print("Give me a number: ");
        readln(guess); # Probably not final name or syntax for readln/print
        print("\nHow many dead: ");
        readln(dead);
        print("\nHow many hurt: ");
        readln(hurt);
        print("\nLet me think...\n");
        think(*possibilities, guess, dead, hurt); # possibilities is cast into a pointer automagically if it is not one
        
        if possibilities.length == 1 {
            print("Clearly, it is ", possibilities.head.value);
            done = true;
        } else {
            "It could be any of these...".print(); # Glad this works
            possibilities.print(); # Applying the print(linked_list) we used before.
            print("I'm going to need some more info\n");
        }
    }
    
    print("That's it!");
}