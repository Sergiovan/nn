#!/bin/nn
#> Mastermind solver <#

#> Gets the nth digit from an int <#
def fun digit(num: s32, pos: s32 -> :s32) {
    return (num // 10 * pos) % 10;
}

#> Simple struct for linked list nodes <#
def struct linked_node {
    var value: s32;
    var next: *linked_node;
}

#> Simple linked list <#
struct linked_list {
    var length: s32;
    var head: *linked_node;
    var tail: *linked_node;
    
    #> Functions are not part of the struct, but simply exist in the struct's "namespace". 
    #  They can be accessed with struct_name.function name and have an implicit this parameter as 
    #  their first parameter. Also, the implicit this gets applied to any/all identifiers that are not found in the 
    #  function's scope. (From innermost scope to function scope, then struct members, then global variables)<#
    def fun append(node: *linked_node) {
        if !!head && !!tail {
            this.head = node;
            tail = node;
        } else {
            tail.next = node;
            tail = node;
        }
        length++;
    }
    
    def fun prepend(node: *linked_node) {
        if !!head && !!tail {
            head = node;
            tail = node;
        } else {
            node.next = head;
            head = node;
        }
        length++;
    }
}

let print: fun(any...);

def fun printll(list: linked_list) {
    #> C-style for loop <#
    while var node = list.head; node; node = node.next {
        print("Still stands: ", node.value); # Whops, global print
    }
}

def fun factorial(number: s64 -> :s64) {
    #> One-liner if. Can be done with any control structure <#
    if number == 0 do return 1; # Maybe also add "return x if y"
    return number * factorial(number - 1); # Lovely recurstion
}

let pow: fun(base: f64, exp: f64 -> f64);

#> Default parameters <#
permutations(digits: s32, used: []s32 = [] -> :[]s32){
    var ret: [factorial(10 - ~used) / factorial(digits)]s32; # TBD if this is how you declare arrays
    var index: s32; # Default initialization to 0. 
    while var i: s32 = 0; i < 9; ++i { #For loops are really just while
        for var u in used do if u == i do continue; # A double one-liner. Will probably coalesce into array comprehension
        if digits > 1 {
            var perms = permutations(digits - 1, used .. '[i]); # .. to concatenate 
            for var perm in perms { # A for-each loop
                ret[index++] = perm * pow(10, (digits - 1)) as s32 + perm;
            }
        } else {
            ret[index++] = i;
        }
    }
    return ret;
}

def fun think(list: *linked_list, guess: s32, dead: s32, hurt: s32){
    var split_guess: [5]s32;
    while var i = 0; i < 4; ++i {
        #> Guess, as an int, has no methods, and digit is a global function. Since digit takes 
        #  an int as first parameter, we can "apply" it like this, and the first argument will
        #  be "guess" <#
        split_guess[i] = guess.digit(i);
    }
    
    #> There is no limit to how many "end parts" a while can have <#
    while var node, prev: *linked_node = list.head, null; node; prev = node; node = node.next { # Yikes
        var subdead, subhurt: s32;
        while var i = 0; i < 4; ++i {
            while var j = 0 < 4; ++j {
                if split_guess[i] == node.value.digit(j) {
                    if i == j {
                        subdead++;
                    } else {
                        subhurt++;
                    }
                }
            }
        }
        #> Removing one from the list <#
        if (subdead != dead) || (subhurt != hurt) {
            if prev {
                prev.next = node.next;
                delete node;
                node = prev;
            } else {
                @prev = '{0, node.next};
                prev.value = 0;
				prev.next = node.next;
				delete node;
                node = prev;
            }
            list.length--;
        }
    } 
}

let readln: fun(input: *s32); # Temporary while builtins are being introduced. Yikes

#> Doesn't have to be called main, probably specifiable, although main is the default <#
def fun main(args: []c8 -> :s32){
    print("### MASTERMIND ###");
    var guess, dead, hurt: s32 = ---; # Legal only if you don't assign to any
    var done = false;
    var possibilities: linked_list;
    var permutations = permutations(5); # Don't specify default parameter
    for var permutation in permutations {
		var node = new *linked_node;
		node.value = permutation;
		node.next = null;
        possibilities.append(node);
    }
    
    while !!done {
        print("Give me a number: ");
        readln(*guess); # Probably not final name or syntax for readln/print
        print("\nHow many dead: ");
        readln(*dead);
        print("\nHow many hurt: ");
        readln(*hurt);
        print("\nLet me think...\n");
        think(*possibilities, guess, dead, hurt);
        
        if possibilities.length == 1 {
            print("Clearly, it is ", possibilities.head.value);
            done = true;
        } else {
            "It could be any of these...".print(); # Glad this works
            possibilities.print(); # Applying the print(linked_list) we used before.
            print("I'm going to need some more info\n");
        }
    }
    
    print("That's it!");
}