import std;
using std.io;

def enum class {A, B, C, D}

def struct student {
	var group: class;
	var grade: u32;
	var name: []c8;
}

def fun sorted(students: []student, comparison: fun(:student, :student -> :s8) -> :[]student) {
	if ~students < 2 {
		return students;
	}
	
	def fun merge(a :[]student, b :[]student -> :[]student) {
		student[~a + ~b] ret;
		var i, j: u64 = 0, 0;
		label loop_begin;
			if i == ~a && j == ~b {
				goto loop_end;
			} else if i == ~a {
				ret[i + j] = b[j];
				++j;
			} else if j == ~b {
				ret[i + j] = a[i];
				++i;
			} else {
				var z: s8 = comparison(a[i], b[j]);
				ret[i + j] = z <= 0 ? a[i++] : b[j++]; 
			}
		goto loop_begin;
		label loop_end;
		return ret;
	}
	
	using std.math as m;
	
	var pivot: s64 = m.floor(~students / 2.0);
	var a, b: []student;
	var spivot: student = students[pivot];
	
	for var s in students {
		if comparison(s, spivot) <= 0 {
			a ..= s;
		} else {
			b ..= s;
		}
	}
	
	a = sorted(a, comparison);
	b = sorted(b, comparison);
	return merge(a, b);
}

var main(:[]c8 -> :s32) {
	var students: []student = '[
		'{class.A, 10, "Christian"}, '{class.A, 0, "Sergio"}, 
		'{class.B, 3, "Johnathan"}, '{class.B, 8, "Oliver"}, 
		'{class.C, 5, "Sarah"}, '{class.C, 7, "Peter"}, 
		'{class.D, 9, "Marta"}, '{class.D, 2, "Maggy"}, '{class.D, 1, "Francis"},
	];
	
	var by_grade: []student = sorted(comparison = fun [] (a: student, b: student -> :s8) {
		return (b.grade - a.grade) as s8; # Let's ignore the fact this might overflow
	}, students = students);
	
	for var s in by_grade {
		io.print("Student: ", s.name);
		io.print("\nGrade: ", s.grade as s32);
		io.print("\nGroup: ");
		
		var class_desc: c32[];
		
		using class.*;
		switch s.group {
			case A {
				class_desc = "North highschool";
			}
			case B {
				class_desc = "South highschool";
			}
			case C {
				class_desc = "East highschool";
			}
			case D {
				class_desc = "West highschool";
			}
		}
		
		io.print(class_desc, "\n\n");
	}
	
	return 0;
}