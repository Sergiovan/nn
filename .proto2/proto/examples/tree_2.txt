AstBlock(9, Type(0, 0))
├─AstUnaryPost(Symbol.SYMDECL, Type(0, 0), False)
│ └─AstFunction(Type(None, 0))
│   └─AstBlock(1, Type(0, 0))
│     └─AstUnaryPost(Symbol.KWRETURN, Type(0, 0), False)
│       └─AstBlock(1, Type(0, 0))
│         └─AstBinary(Symbol.MODULO, Type(3, 0), False)
│           ├─AstBinary(Symbol.LESS, Type(3, 0), False)
│           │ ├─AstBinary(Symbol.ACCESS, Type(3, 0), False)
│           │ │ ├─AstByte(0, Type(0, 0))
│           │ │ └─AstDWord(3, Type(0, 0))
│           │ └─AstBinary(Symbol.POINTER, Type(3, 0), False)
│           │   ├─AstBinary(Symbol.DIVIDE, Type(3, 0), False)
│           │   │ ├─AstSymbol(StEntryType.VARIABLE, num)
│           │   │ └─AstQWord(10, Type(4, 0))
│           │   └─AstSymbol(StEntryType.VARIABLE, pos)
│           └─AstQWord(10, Type(4, 0))
├─AstUnaryPost(Symbol.SYMDECL, Type(0, 0), False)
│ └─AstStruct([], None)
├─AstUnaryPost(Symbol.SYMDECL, Type(0, 0), False)
│ └─AstStruct([], None)
├─AstUnaryPost(Symbol.SYMDECL, Type(0, 0), False)
│ └─AstFunction(Type(None, 0))
│   └─AstBlock(1, Type(0, 0))
│     └─AstBinary(Symbol.KWFOR, Type(0, 0), False)
│       ├─AstUnaryPost(Symbol.KWFORCLASSIC, Type(0, 0), False)
│       │ └─AstBlock(3, Type(0, 0))
│       │   ├─AstBinary(Symbol.ASSIGN, Type(0, 0), False)
│       │   │ ├─AstBlock(1, Type(0, 0))
│       │   │ │ └─AstUnaryPost(Symbol.SYMDECL, Type(0, 0), False)
│       │   │ │   └─AstSymbol(StEntryType.VARIABLE, node)
│       │   │ └─AstBlock(1, Type(0, 0))
│       │   │   └─AstUnaryPost(Symbol.ACCESS, Type(13, 0), True)
│       │   │     └─AstBlock(2, Type(0, 0))
│       │   │       ├─AstSymbol(StEntryType.VARIABLE, list)
│       │   │       └─AstString(head, Type(9, 0))
│       │   ├─AstSymbol(StEntryType.VARIABLE, node)
│       │   └─AstBinary(Symbol.ASSIGN, Type(0, 0), False)
│       │     ├─AstBlock(1, Type(0, 0))
│       │     │ └─AstSymbol(StEntryType.VARIABLE, node)
│       │     └─AstBlock(1, Type(0, 0))
│       │       └─AstUnaryPost(Symbol.ACCESS, Type(13, 0), True)
│       │         └─AstBlock(2, Type(0, 0))
│       │           ├─AstSymbol(StEntryType.VARIABLE, node)
│       │           └─AstString(next, Type(9, 0))
│       └─AstBlock(1, Type(0, 0))
│         └─AstBinary(Symbol.PAREN_LEFT, Type(12, 0), False)
│           ├─AstSymbol(StEntryType.FUNCTION, print)
│           └─AstBlock(0, Type(0, 0))
├─AstUnaryPost(Symbol.SYMDECL, Type(0, 0), False)
│ └─AstFunction(Type(None, 0))
│   └─AstBlock(2, Type(0, 0))
│     ├─AstBinary(Symbol.KWIF, Type(0, 0), False)
│     │ ├─AstBlock(1, Type(0, 0))
│     │ │ └─AstBinary(Symbol.EQUALS, Type(10, 0), False)
│     │ │   ├─AstSymbol(StEntryType.VARIABLE, number)
│     │ │   └─AstQWord(0, Type(4, 0))
│     │ └─AstUnaryPost(Symbol.KWRETURN, Type(0, 0), False)
│     │   └─AstBlock(1, Type(0, 0))
│     │     └─AstQWord(1, Type(4, 0))
│     └─AstUnaryPost(Symbol.KWRETURN, Type(0, 0), False)
│       └─AstBlock(1, Type(0, 0))
│         └─AstBinary(Symbol.POINTER, Type(3, 0), False)
│           ├─AstSymbol(StEntryType.VARIABLE, number)
│           └─AstBinary(Symbol.PAREN_LEFT, Type(12, 0), False)
│             ├─AstSymbol(StEntryType.FUNCTION, factorial)
│             └─AstBlock(0, Type(0, 0))
├─AstUnaryPost(Symbol.SYMDECL, Type(0, 0), False)
│ └─AstFunction(Type(None, 0))
│   └─AstBlock(4, Type(0, 0))
│     ├─AstBinary(Symbol.ASSIGN, Type(0, 0), False)
│     │ ├─AstBlock(1, Type(0, 0))
│     │ │ └─AstUnaryPost(Symbol.SYMDECL, Type(0, 0), False)
│     │ │   └─AstSymbol(StEntryType.VARIABLE, ret)
│     │ └─AstDWord(0, Type(0, 0))
│     ├─AstBinary(Symbol.ASSIGN, Type(0, 0), False)
│     │ ├─AstBlock(1, Type(0, 0))
│     │ │ └─AstUnaryPost(Symbol.SYMDECL, Type(0, 0), False)
│     │ │   └─AstSymbol(StEntryType.VARIABLE, index)
│     │ └─AstDWord(0, Type(0, 0))
│     ├─AstBinary(Symbol.KWFOR, Type(0, 0), False)
│     │ ├─AstUnaryPost(Symbol.KWFORLUA, Type(0, 0), False)
│     │ │ └─AstBinary(Symbol.ASSIGN, Type(0, 0), False)
│     │ │   ├─AstBlock(1, Type(0, 0))
│     │ │   │ └─AstUnaryPost(Symbol.SYMDECL, Type(0, 0), False)
│     │ │   │   └─AstSymbol(StEntryType.VARIABLE, i)
│     │ │   └─AstBlock(2, Type(0, 0))
│     │ │     ├─AstQWord(0, Type(4, 0))
│     │ │     └─AstQWord(9, Type(4, 0))
│     │ └─AstBlock(2, Type(0, 0))
│     │   ├─AstBinary(Symbol.KWFOR, Type(0, 0), False)
│     │   │ ├─AstUnaryPost(Symbol.KWFOREACH, Type(0, 0), False)
│     │   │ │ └─AstBinary(Symbol.TERNARY_CHOICE, Type(0, 0), False)
│     │   │ │   ├─AstBlock(1, Type(0, 0))
│     │   │ │   │ └─AstUnaryPost(Symbol.SYMDECL, Type(0, 0), False)
│     │   │ │   │   └─AstSymbol(StEntryType.VARIABLE, u)
│     │   │ │   └─AstSymbol(StEntryType.VARIABLE, used)
│     │   │ └─AstBinary(Symbol.KWIF, Type(0, 0), False)
│     │   │   ├─AstBlock(1, Type(0, 0))
│     │   │   │ └─AstBinary(Symbol.EQUALS, Type(10, 0), False)
│     │   │   │   ├─AstSymbol(StEntryType.VARIABLE, u)
│     │   │   │   └─AstSymbol(StEntryType.VARIABLE, i)
│     │   │   └─AstUnaryPost(Symbol.KWCONTINUE, Type(0, 0), False)
│     │   │     └─AstNone()
│     │   └─AstBinary(Symbol.KWIF, Type(0, 0), False)
│     │     ├─AstBlock(1, Type(0, 0))
│     │     │ └─AstBinary(Symbol.GREATER, Type(10, 0), False)
│     │     │   ├─AstSymbol(StEntryType.VARIABLE, digits)
│     │     │   └─AstQWord(1, Type(4, 0))
│     │     └─AstBinary(Symbol.KWELSE, Type(0, 0), False)
│     │       ├─AstBlock(2, Type(0, 0))
│     │       │ ├─AstBinary(Symbol.ASSIGN, Type(0, 0), False)
│     │       │ │ ├─AstBlock(1, Type(0, 0))
│     │       │ │ │ └─AstUnaryPost(Symbol.SYMDECL, Type(0, 0), False)
│     │       │ │ │   └─AstSymbol(StEntryType.VARIABLE, perms)
│     │       │ │ └─AstBlock(1, Type(0, 0))
│     │       │ │   └─AstBinary(Symbol.PAREN_LEFT, Type(12, 0), False)
│     │       │ │     ├─AstSymbol(StEntryType.FUNCTION, permutations)
│     │       │ │     └─AstBlock(0, Type(0, 0))
│     │       │ └─AstBinary(Symbol.KWFOR, Type(0, 0), False)
│     │       │   ├─AstUnaryPost(Symbol.KWFOREACH, Type(0, 0), False)
│     │       │   │ └─AstBinary(Symbol.TERNARY_CHOICE, Type(0, 0), False)
│     │       │   │   ├─AstBlock(1, Type(0, 0))
│     │       │   │   │ └─AstUnaryPost(Symbol.SYMDECL, Type(0, 0), False)
│     │       │   │   │   └─AstSymbol(StEntryType.VARIABLE, perm)
│     │       │   │   └─AstSymbol(StEntryType.VARIABLE, perms)
│     │       │   └─AstBlock(1, Type(0, 0))
│     │       │     └─AstBinary(Symbol.ASSIGN, Type(0, 0), False)
│     │       │       ├─AstBlock(1, Type(0, 0))
│     │       │       │ └─AstBinary(Symbol.BRACKET_LEFT, Type(0, 0), True)
│     │       │       │   ├─AstSymbol(StEntryType.VARIABLE, ret)
│     │       │       │   └─AstUnaryPost(Symbol.INCREMENT, Type(3, 0), False)
│     │       │       │     └─AstSymbol(StEntryType.VARIABLE, index)
│     │       │       └─AstBlock(1, Type(0, 0))
│     │       │         └─AstBinary(Symbol.ADD, Type(3, 0), False)
│     │       │           ├─AstBinary(Symbol.POINTER, Type(3, 0), False)
│     │       │           │ ├─AstSymbol(StEntryType.VARIABLE, perm)
│     │       │           │ └─AstBinary(Symbol.POWER, Type(4, 0), False)
│     │       │           │   ├─AstQWord(10, Type(4, 0))
│     │       │           │   └─AstBinary(Symbol.SUBTRACT, Type(3, 0), False)
│     │       │           │     ├─AstSymbol(StEntryType.VARIABLE, digits)
│     │       │           │     └─AstQWord(1, Type(4, 0))
│     │       │           └─AstSymbol(StEntryType.VARIABLE, perm)
│     │       └─AstBlock(1, Type(0, 0))
│     │         └─AstBinary(Symbol.ASSIGN, Type(0, 0), False)
│     │           ├─AstBlock(1, Type(0, 0))
│     │           │ └─AstBinary(Symbol.BRACKET_LEFT, Type(0, 0), True)
│     │           │   ├─AstSymbol(StEntryType.VARIABLE, ret)
│     │           │   └─AstUnaryPost(Symbol.INCREMENT, Type(3, 0), False)
│     │           │     └─AstSymbol(StEntryType.VARIABLE, index)
│     │           └─AstBlock(1, Type(0, 0))
│     │             └─AstSymbol(StEntryType.VARIABLE, i)
│     └─AstUnaryPost(Symbol.KWRETURN, Type(0, 0), False)
│       └─AstBlock(1, Type(0, 0))
│         └─AstSymbol(StEntryType.VARIABLE, ret)
├─AstUnaryPost(Symbol.SYMDECL, Type(0, 0), False)
│ └─AstFunction(Type(None, 0))
│   └─AstBlock(3, Type(0, 0))
│     ├─AstBinary(Symbol.ASSIGN, Type(0, 0), False)
│     │ ├─AstBlock(1, Type(0, 0))
│     │ │ └─AstUnaryPost(Symbol.SYMDECL, Type(0, 0), False)
│     │ │   └─AstSymbol(StEntryType.VARIABLE, split_guess)
│     │ └─AstDWord(0, Type(0, 0))
│     ├─AstBinary(Symbol.KWFOR, Type(0, 0), False)
│     │ ├─AstUnaryPost(Symbol.KWFORLUA, Type(0, 0), False)
│     │ │ └─AstBinary(Symbol.ASSIGN, Type(0, 0), False)
│     │ │   ├─AstBlock(1, Type(0, 0))
│     │ │   │ └─AstUnaryPost(Symbol.SYMDECL, Type(0, 0), False)
│     │ │   │   └─AstSymbol(StEntryType.VARIABLE, i)
│     │ │   └─AstBlock(2, Type(0, 0))
│     │ │     ├─AstQWord(0, Type(4, 0))
│     │ │     └─AstQWord(4, Type(4, 0))
│     │ └─AstBlock(1, Type(0, 0))
│     │   └─AstBinary(Symbol.ASSIGN, Type(0, 0), False)
│     │     ├─AstBlock(1, Type(0, 0))
│     │     │ └─AstBinary(Symbol.BRACKET_LEFT, Type(0, 0), True)
│     │     │   ├─AstSymbol(StEntryType.VARIABLE, split_guess)
│     │     │   └─AstSymbol(StEntryType.VARIABLE, i)
│     │     └─AstBlock(1, Type(0, 0))
│     │       └─AstBinary(Symbol.PAREN_LEFT, Type(12, 0), False)
│     │         ├─AstSymbol(StEntryType.FUNCTION, digit)
│     │         └─AstBlock(0, Type(0, 0))
│     └─AstBinary(Symbol.KWFOR, Type(0, 0), False)
│       ├─AstUnaryPost(Symbol.KWFORCLASSIC, Type(0, 0), False)
│       │ └─AstBlock(3, Type(0, 0))
│       │   ├─AstBinary(Symbol.ASSIGN, Type(0, 0), False)
│       │   │ ├─AstBlock(2, Type(0, 0))
│       │   │ │ ├─AstUnaryPost(Symbol.SYMDECL, Type(0, 0), False)
│       │   │ │ │ └─AstSymbol(StEntryType.VARIABLE, node)
│       │   │ │ └─AstUnaryPost(Symbol.SYMDECL, Type(0, 0), False)
│       │   │ │   └─AstSymbol(StEntryType.VARIABLE, prev)
│       │   │ └─AstBlock(2, Type(0, 0))
│       │   │   ├─AstUnaryPost(Symbol.ACCESS, Type(13, 0), True)
│       │   │   │ └─AstBlock(2, Type(0, 0))
│       │   │   │   ├─AstSymbol(StEntryType.VARIABLE, list)
│       │   │   │   └─AstString(head, Type(9, 0))
│       │   │   └─AstNone()
│       │   ├─AstSymbol(StEntryType.VARIABLE, node)
│       │   └─AstBinary(Symbol.ASSIGN, Type(0, 0), False)
│       │     ├─AstBlock(1, Type(0, 0))
│       │     │ └─AstSymbol(StEntryType.VARIABLE, prev)
│       │     └─AstBlock(1, Type(0, 0))
│       │       └─AstSymbol(StEntryType.VARIABLE, node)
│       └─AstBlock(3, Type(0, 0))
│         ├─AstBinary(Symbol.ASSIGN, Type(0, 0), False)
│         │ ├─AstBlock(2, Type(0, 0))
│         │ │ ├─AstUnaryPost(Symbol.SYMDECL, Type(0, 0), False)
│         │ │ │ └─AstSymbol(StEntryType.VARIABLE, subdead)
│         │ │ └─AstUnaryPost(Symbol.SYMDECL, Type(0, 0), False)
│         │ │   └─AstSymbol(StEntryType.VARIABLE, subhurt)
│         │ └─AstDWord(0, Type(0, 0))
│         ├─AstBinary(Symbol.KWFOR, Type(0, 0), False)
│         │ ├─AstUnaryPost(Symbol.KWFORLUA, Type(0, 0), False)
│         │ │ └─AstBinary(Symbol.ASSIGN, Type(0, 0), False)
│         │ │   ├─AstBlock(1, Type(0, 0))
│         │ │   │ └─AstUnaryPost(Symbol.SYMDECL, Type(0, 0), False)
│         │ │   │   └─AstSymbol(StEntryType.VARIABLE, i)
│         │ │   └─AstBlock(2, Type(0, 0))
│         │ │     ├─AstQWord(0, Type(4, 0))
│         │ │     └─AstQWord(4, Type(4, 0))
│         │ └─AstBlock(1, Type(0, 0))
│         │   └─AstBinary(Symbol.KWFOR, Type(0, 0), False)
│         │     ├─AstUnaryPost(Symbol.KWFORLUA, Type(0, 0), False)
│         │     │ └─AstBinary(Symbol.ASSIGN, Type(0, 0), False)
│         │     │   ├─AstBlock(1, Type(0, 0))
│         │     │   │ └─AstUnaryPost(Symbol.SYMDECL, Type(0, 0), False)
│         │     │   │   └─AstSymbol(StEntryType.VARIABLE, j)
│         │     │   └─AstBlock(2, Type(0, 0))
│         │     │     ├─AstQWord(0, Type(4, 0))
│         │     │     └─AstQWord(4, Type(4, 0))
│         │     └─AstBlock(1, Type(0, 0))
│         │       └─AstBinary(Symbol.KWIF, Type(0, 0), False)
│         │         ├─AstBlock(1, Type(0, 0))
│         │         │ └─AstBinary(Symbol.EQUALS, Type(10, 0), False)
│         │         │   ├─AstBinary(Symbol.BRACKET_LEFT, Type(0, 0), True)
│         │         │   │ ├─AstSymbol(StEntryType.VARIABLE, split_guess)
│         │         │   │ └─AstSymbol(StEntryType.VARIABLE, i)
│         │         │   └─AstBinary(Symbol.PAREN_LEFT, Type(13, 0), False)
│         │         │     ├─AstUnaryPost(Symbol.ACCESS, Type(13, 0), True)
│         │         │     │ └─AstBlock(3, Type(0, 0))
│         │         │     │   ├─AstSymbol(StEntryType.VARIABLE, node)
│         │         │     │   ├─AstString(value, Type(9, 0))
│         │         │     │   └─AstString(digit, Type(9, 0))
│         │         │     └─AstBlock(0, Type(0, 0))
│         │         └─AstBlock(1, Type(0, 0))
│         │           └─AstBinary(Symbol.KWIF, Type(0, 0), False)
│         │             ├─AstBlock(1, Type(0, 0))
│         │             │ └─AstBinary(Symbol.EQUALS, Type(10, 0), False)
│         │             │   ├─AstSymbol(StEntryType.VARIABLE, i)
│         │             │   └─AstSymbol(StEntryType.VARIABLE, j)
│         │             └─AstBinary(Symbol.KWELSE, Type(0, 0), False)
│         │               ├─AstBlock(1, Type(0, 0))
│         │               │ └─AstUnaryPost(Symbol.INCREMENT, Type(3, 0), False)
│         │               │   └─AstSymbol(StEntryType.VARIABLE, subdead)
│         │               └─AstBlock(1, Type(0, 0))
│         │                 └─AstUnaryPost(Symbol.INCREMENT, Type(3, 0), False)
│         │                   └─AstSymbol(StEntryType.VARIABLE, subhurt)
│         └─AstBinary(Symbol.KWIF, Type(0, 0), False)
│           ├─AstBlock(1, Type(0, 0))
│           │ └─AstBinary(Symbol.NOT_EQUALS, Type(10, 0), False)
│           │   ├─AstBinary(Symbol.NOT_EQUALS, Type(10, 0), False)
│           │   │ ├─AstSymbol(StEntryType.VARIABLE, subdead)
│           │   │ └─AstBinary(Symbol.LOR, Type(10, 0), False)
│           │   │   ├─AstSymbol(StEntryType.VARIABLE, dead)
│           │   │   └─AstSymbol(StEntryType.VARIABLE, subhurt)
│           │   └─AstSymbol(StEntryType.VARIABLE, hurt)
│           └─AstBlock(2, Type(0, 0))
│             ├─AstBinary(Symbol.KWIF, Type(0, 0), False)
│             │ ├─AstBlock(1, Type(0, 0))
│             │ │ └─AstSymbol(StEntryType.VARIABLE, prev)
│             │ └─AstBinary(Symbol.KWELSE, Type(0, 0), False)
│             │   ├─AstBlock(3, Type(0, 0))
│             │   │ ├─AstBinary(Symbol.ASSIGN, Type(0, 0), False)
│             │   │ │ ├─AstBlock(1, Type(0, 0))
│             │   │ │ │ └─AstUnaryPost(Symbol.ACCESS, Type(13, 0), True)
│             │   │ │ │   └─AstBlock(2, Type(0, 0))
│             │   │ │ │     ├─AstSymbol(StEntryType.VARIABLE, prev)
│             │   │ │ │     └─AstString(next, Type(9, 0))
│             │   │ │ └─AstBlock(1, Type(0, 0))
│             │   │ │   └─AstUnaryPost(Symbol.ACCESS, Type(13, 0), True)
│             │   │ │     └─AstBlock(2, Type(0, 0))
│             │   │ │       ├─AstSymbol(StEntryType.VARIABLE, node)
│             │   │ │       └─AstString(next, Type(9, 0))
│             │   │ ├─AstUnaryPost(Symbol.KWDELETE, Type(0, 0), False)
│             │   │ │ └─AstBlock(1, Type(0, 0))
│             │   │ │   └─AstSymbol(StEntryType.VARIABLE, node)
│             │   │ └─AstBinary(Symbol.ASSIGN, Type(0, 0), False)
│             │   │   ├─AstBlock(1, Type(0, 0))
│             │   │   │ └─AstSymbol(StEntryType.VARIABLE, node)
│             │   │   └─AstBlock(1, Type(0, 0))
│             │   │     └─AstSymbol(StEntryType.VARIABLE, prev)
│             │   └─AstBlock(4, Type(0, 0))
│             │     ├─AstBinary(Symbol.ASSIGN, Type(0, 0), False)
│             │     │ ├─AstBlock(1, Type(0, 0))
│             │     │ │ └─AstUnaryPost(Symbol.ACCESS, Type(13, 0), True)
│             │     │ │   └─AstBlock(2, Type(0, 0))
│             │     │ │     ├─AstSymbol(StEntryType.VARIABLE, prev)
│             │     │ │     └─AstString(value, Type(9, 0))
│             │     │ └─AstBlock(1, Type(0, 0))
│             │     │   └─AstQWord(0, Type(4, 0))
│             │     ├─AstBinary(Symbol.ASSIGN, Type(0, 0), False)
│             │     │ ├─AstBlock(1, Type(0, 0))
│             │     │ │ └─AstUnaryPost(Symbol.ACCESS, Type(13, 0), True)
│             │     │ │   └─AstBlock(2, Type(0, 0))
│             │     │ │     ├─AstSymbol(StEntryType.VARIABLE, prev)
│             │     │ │     └─AstString(follow, Type(9, 0))
│             │     │ └─AstBlock(1, Type(0, 0))
│             │     │   └─AstUnaryPost(Symbol.ACCESS, Type(13, 0), True)
│             │     │     └─AstBlock(2, Type(0, 0))
│             │     │       ├─AstSymbol(StEntryType.VARIABLE, node)
│             │     │       └─AstString(next, Type(9, 0))
│             │     ├─AstUnaryPost(Symbol.KWDELETE, Type(0, 0), False)
│             │     │ └─AstBlock(1, Type(0, 0))
│             │     │   └─AstSymbol(StEntryType.VARIABLE, node)
│             │     └─AstBinary(Symbol.ASSIGN, Type(0, 0), False)
│             │       ├─AstBlock(1, Type(0, 0))
│             │       │ └─AstSymbol(StEntryType.VARIABLE, node)
│             │       └─AstBlock(1, Type(0, 0))
│             │         └─AstSymbol(StEntryType.VARIABLE, prev)
│             └─AstUnaryPost(Symbol.DECREMENT, Type(13, 0), False)
│               └─AstUnaryPost(Symbol.ACCESS, Type(13, 0), True)
│                 └─AstBlock(2, Type(0, 0))
│                   ├─AstSymbol(StEntryType.VARIABLE, list)
│                   └─AstString(length, Type(9, 0))
├─AstUnaryPost(Symbol.SYMDECL, Type(0, 0), False)
│ └─AstFunction(Type(None, 0))
│   └─AstBlock(0, Type(0, 0))
└─AstUnaryPost(Symbol.SYMDECL, Type(0, 0), False)
  └─AstFunction(Type(None, 0))
    └─AstBlock(8, Type(0, 0))
      ├─AstBinary(Symbol.PAREN_LEFT, Type(12, 0), False)
      │ ├─AstSymbol(StEntryType.FUNCTION, print)
      │ └─AstBlock(0, Type(0, 0))
      ├─AstBinary(Symbol.ASSIGN, Type(0, 0), False)
      │ ├─AstBlock(3, Type(0, 0))
      │ │ ├─AstUnaryPost(Symbol.SYMDECL, Type(0, 0), False)
      │ │ │ └─AstSymbol(StEntryType.VARIABLE, guess)
      │ │ ├─AstUnaryPost(Symbol.SYMDECL, Type(0, 0), False)
      │ │ │ └─AstSymbol(StEntryType.VARIABLE, dead)
      │ │ └─AstUnaryPost(Symbol.SYMDECL, Type(0, 0), False)
      │ │   └─AstSymbol(StEntryType.VARIABLE, hurt)
      │ └─AstDWord(0, Type(0, 0))
      ├─AstBinary(Symbol.ASSIGN, Type(0, 0), False)
      │ ├─AstBlock(1, Type(0, 0))
      │ │ └─AstUnaryPost(Symbol.SYMDECL, Type(0, 0), False)
      │ │   └─AstSymbol(StEntryType.VARIABLE, done)
      │ └─AstBlock(1, Type(0, 0))
      │   └─AstByte(0, Type(10, 0))
      ├─AstBinary(Symbol.ASSIGN, Type(0, 0), False)
      │ ├─AstBlock(1, Type(0, 0))
      │ │ └─AstUnaryPost(Symbol.SYMDECL, Type(0, 0), False)
      │ │   └─AstSymbol(StEntryType.VARIABLE, possibilities)
      │ └─AstDWord(0, Type(0, 0))
      ├─AstBinary(Symbol.ASSIGN, Type(0, 0), False)
      │ ├─AstBlock(1, Type(0, 0))
      │ │ └─AstUnaryPost(Symbol.SYMDECL, Type(0, 0), False)
      │ │   └─AstSymbol(StEntryType.VARIABLE, permutations)
      │ └─AstBlock(1, Type(0, 0))
      │   └─AstBinary(Symbol.PAREN_LEFT, Type(0, 0), False)
      │     ├─AstSymbol(StEntryType.VARIABLE, permutations)
      │     └─AstBlock(0, Type(0, 0))
      ├─AstBinary(Symbol.KWFOR, Type(0, 0), False)
      │ ├─AstUnaryPost(Symbol.KWFOREACH, Type(0, 0), False)
      │ │ └─AstBinary(Symbol.TERNARY_CHOICE, Type(0, 0), False)
      │ │   ├─AstBlock(1, Type(0, 0))
      │ │   │ └─AstUnaryPost(Symbol.SYMDECL, Type(0, 0), False)
      │ │   │   └─AstSymbol(StEntryType.VARIABLE, permutation)
      │ │   └─AstSymbol(StEntryType.VARIABLE, permutations)
      │ └─AstBlock(1, Type(0, 0))
      │   └─AstBinary(Symbol.PAREN_LEFT, Type(13, 0), False)
      │     ├─AstUnaryPost(Symbol.ACCESS, Type(13, 0), True)
      │     │ └─AstBlock(2, Type(0, 0))
      │     │   ├─AstSymbol(StEntryType.VARIABLE, possibilities)
      │     │   └─AstString(append, Type(9, 0))
      │     └─AstBlock(0, Type(0, 0))
      ├─AstBinary(Symbol.KWWHILE, Type(0, 0), False)
      │ ├─AstBlock(1, Type(0, 0))
      │ │ └─AstUnarypre(Symbol.LNOT, Type(10, 0), False)
      │ │   └─AstSymbol(StEntryType.VARIABLE, done)
      │ └─AstBlock(9, Type(0, 0))
      │   ├─AstBinary(Symbol.PAREN_LEFT, Type(12, 0), False)
      │   │ ├─AstSymbol(StEntryType.FUNCTION, print)
      │   │ └─AstBlock(0, Type(0, 0))
      │   ├─AstBinary(Symbol.PAREN_LEFT, Type(12, 0), False)
      │   │ ├─AstSymbol(StEntryType.FUNCTION, readln)
      │   │ └─AstBlock(0, Type(0, 0))
      │   ├─AstBinary(Symbol.PAREN_LEFT, Type(12, 0), False)
      │   │ ├─AstSymbol(StEntryType.FUNCTION, print)
      │   │ └─AstBlock(0, Type(0, 0))
      │   ├─AstBinary(Symbol.PAREN_LEFT, Type(12, 0), False)
      │   │ ├─AstSymbol(StEntryType.FUNCTION, readln)
      │   │ └─AstBlock(0, Type(0, 0))
      │   ├─AstBinary(Symbol.PAREN_LEFT, Type(12, 0), False)
      │   │ ├─AstSymbol(StEntryType.FUNCTION, print)
      │   │ └─AstBlock(0, Type(0, 0))
      │   ├─AstBinary(Symbol.PAREN_LEFT, Type(12, 0), False)
      │   │ ├─AstSymbol(StEntryType.FUNCTION, readln)
      │   │ └─AstBlock(0, Type(0, 0))
      │   ├─AstBinary(Symbol.PAREN_LEFT, Type(12, 0), False)
      │   │ ├─AstSymbol(StEntryType.FUNCTION, print)
      │   │ └─AstBlock(0, Type(0, 0))
      │   ├─AstBinary(Symbol.PAREN_LEFT, Type(12, 0), False)
      │   │ ├─AstSymbol(StEntryType.FUNCTION, think)
      │   │ └─AstBlock(0, Type(0, 0))
      │   └─AstBinary(Symbol.KWIF, Type(0, 0), False)
      │     ├─AstBlock(1, Type(0, 0))
      │     │ └─AstBinary(Symbol.EQUALS, Type(10, 0), False)
      │     │   ├─AstUnaryPost(Symbol.ACCESS, Type(13, 0), True)
      │     │   │ └─AstBlock(2, Type(0, 0))
      │     │   │   ├─AstSymbol(StEntryType.VARIABLE, possibilities)
      │     │   │   └─AstString(length, Type(9, 0))
      │     │   └─AstQWord(1, Type(4, 0))
      │     └─AstBinary(Symbol.KWELSE, Type(0, 0), False)
      │       ├─AstBlock(2, Type(0, 0))
      │       │ ├─AstBinary(Symbol.PAREN_LEFT, Type(12, 0), False)
      │       │ │ ├─AstSymbol(StEntryType.FUNCTION, print)
      │       │ │ └─AstBlock(0, Type(0, 0))
      │       │ └─AstBinary(Symbol.ASSIGN, Type(0, 0), False)
      │       │   ├─AstBlock(1, Type(0, 0))
      │       │   │ └─AstSymbol(StEntryType.VARIABLE, done)
      │       │   └─AstBlock(1, Type(0, 0))
      │       │     └─AstByte(1, Type(10, 0))
      │       └─AstBlock(3, Type(0, 0))
      │         ├─AstBinary(Symbol.PAREN_LEFT, Type(12, 0), False)
      │         │ ├─AstSymbol(StEntryType.FUNCTION, print)
      │         │ └─AstBlock(0, Type(0, 0))
      │         ├─AstBinary(Symbol.PAREN_LEFT, Type(12, 0), False)
      │         │ ├─AstSymbol(StEntryType.FUNCTION, print)
      │         │ └─AstBlock(0, Type(0, 0))
      │         └─AstBinary(Symbol.PAREN_LEFT, Type(12, 0), False)
      │           ├─AstSymbol(StEntryType.FUNCTION, print)
      │           └─AstBlock(0, Type(0, 0))
      └─AstBinary(Symbol.PAREN_LEFT, Type(12, 0), False)
        ├─AstSymbol(StEntryType.FUNCTION, print)
        └─AstBlock(0, Type(0, 0))